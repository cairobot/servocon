
# 1 "stdfc.c"

# 13 "/Applications/microchip/xc8/v1.37/include/stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 26 "stdfc.h"
void memset(uint8_t *str, char val, uint8_t len);
uint8_t ccat(char *str, uint8_t len, char append);
uint8_t strcmp(const char *str0, char *str1);
uint8_t strlen(char *str);
uint32_t str2_to_int(char *str);
int32_t str8_to_int(char *str);
int32_t str10_to_int(char *str);
int32_t str16_to_int(char *str);
void int_to_str2(char *str, uint32_t i, uint8_t until);
void int_to_str8(char *str, int32_t i);
void int_to_str10(char *str, int32_t i);
void int_to_str16(char *str, int32_t i);

# 13 "stdfc.c"
void memset(uint8_t *str, char val, uint8_t len) {
uint8_t i;
for (i = 0; i < len; i++)
str[i] = val;
}

uint8_t ccat(char *str, uint8_t len, char append) {
uint8_t i;

for (i = 0; i < len - 1; i++) {
if (str[i] == '\0') {
str[i] = append;
str[i + 1] = '\0';
return 0;
}
}
return 1;
}

uint8_t strcmp(const char *str0, char *str1) {
while (*str0 && *str1) {
if (*str0 != *str1)
return 0;
str0++;
str1++;
}

if (*str0 != *str1)
return 0;

return 1;
}

uint8_t strlen(char *str) {
uint8_t i = 0;
while (*str) {
i++;
str++;
}
return i;
}

void rev(char *str) {
uint8_t i, k, len, temp;
len = strlen(str);
for (i = 0, k = len - 1; i < (len / 2); i++, k--) {
temp = str[k];
str[k] = str[i];
str[i] = temp;

}
}

uint32_t str2_to_int(char *str) {
uint32_t res = 0;
while (*str) {
res <<= 1;
res |= (*str == '1') ? 1 : 0;
str++;
}
return res;
}

int32_t str8_to_int(char *str) {
uint8_t i = 0;
int32_t res = 0;
while (str[i]) {
if (str[i] >= '0' && str[i] <= '7') {
res <<= 3;
res += str[i] - '0';
}
i++;
}
return res;
}

int32_t str10_to_int(char *str) {
uint8_t i = 0;
int32_t res = 0;
while (str[i]) {
if (str[i] >= '0' && str[i] <= '9') {
res *= 10;
res += str[i] - '0';
}
i++;
}
return res;
}

int32_t str16_to_int(char *str) {
uint8_t i = 0;
int32_t res = 0;
while (str[i]) {
res <<= 4;
if (str[i] >= '0' && str[i] <= '9') {
res += str[i] - '0';
} else if (str[i] >= 'a' && str[i] <= 'f') {
res += str[i] - 'a';
} else if (str[i] >= 'A' && str[i] <= 'F') {
res += str[i] - 'A';
}
i++;
}
return res;
}

void int_to_str2(char *str, uint32_t i, uint8_t until) {
uint8_t j = 0;
while (until--) {
str[j++] = '0' + (i & 0x00000001);
i >>= 1;
}
str[j] = 0;
rev(str);
}

void int_to_str8(char *str, int32_t i) {
uint8_t j = 0;
uint8_t neg = (i < 0) ? 1 : 0;
if (i < 0) i = -i;
while (i > 0) {
str[j++] = '0' + (i % 8);
i >>= 3;
}
if (neg)
str[j++] = '-';
str[j] = 0;
rev(str);
}

void int_to_str10(char *str, int32_t i) {
uint8_t j = 0;
uint8_t neg = (i < 0) ? 1 : 0;
if (i < 0) i = -i;
while (i != 0) {
str[j++] = '0' + (i % 10);
i /= 10;
}
if (neg)
str[j++] = '-';
str[j] = 0;
rev(str);
}

void int_to_str16(char *str, int32_t i) {
uint8_t j = 0;
uint8_t neg = (i < 0) ? 1 : 0;
uint8_t num;
if (i < 0) i = -i;
while (i != 0) {
num = i % 16;
if (num >= 10)
str[j++] = 'a' + num - 10;
else
str[j++] = '0' + num;
i >>= 4;
}
if (neg)
str[j++] = '-';
str[j] = 0;
rev(str);
}
