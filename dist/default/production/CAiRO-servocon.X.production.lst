

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Dec  6 15:02:38 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0013                     	;# 
    57  0014                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0094                     	;# 
    75  0095                     	;# 
    76  0096                     	;# 
    77  0097                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009B                     	;# 
    82  009B                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  010C                     	;# 
    87  010D                     	;# 
    88  0111                     	;# 
    89  0112                     	;# 
    90  0113                     	;# 
    91  0114                     	;# 
    92  0115                     	;# 
    93  0116                     	;# 
    94  0117                     	;# 
    95  0118                     	;# 
    96  0119                     	;# 
    97  011A                     	;# 
    98  011B                     	;# 
    99  011D                     	;# 
   100  011E                     	;# 
   101  018C                     	;# 
   102  018D                     	;# 
   103  0191                     	;# 
   104  0191                     	;# 
   105  0192                     	;# 
   106  0193                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0194                     	;# 
   110  0195                     	;# 
   111  0196                     	;# 
   112  0199                     	;# 
   113  019A                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019C                     	;# 
   119  019C                     	;# 
   120  019D                     	;# 
   121  019E                     	;# 
   122  019F                     	;# 
   123  020C                     	;# 
   124  020D                     	;# 
   125  0211                     	;# 
   126  0211                     	;# 
   127  0212                     	;# 
   128  0212                     	;# 
   129  0213                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0214                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  0219                     	;# 
   141  021A                     	;# 
   142  021B                     	;# 
   143  021C                     	;# 
   144  021D                     	;# 
   145  021E                     	;# 
   146  021F                     	;# 
   147  0291                     	;# 
   148  0291                     	;# 
   149  0292                     	;# 
   150  0293                     	;# 
   151  0294                     	;# 
   152  0295                     	;# 
   153  0295                     	;# 
   154  0296                     	;# 
   155  0298                     	;# 
   156  0298                     	;# 
   157  0299                     	;# 
   158  029A                     	;# 
   159  029B                     	;# 
   160  029C                     	;# 
   161  029C                     	;# 
   162  029D                     	;# 
   163  029E                     	;# 
   164  029E                     	;# 
   165  0311                     	;# 
   166  0311                     	;# 
   167  0312                     	;# 
   168  0313                     	;# 
   169  0318                     	;# 
   170  0318                     	;# 
   171  0319                     	;# 
   172  031A                     	;# 
   173  0394                     	;# 
   174  0395                     	;# 
   175  0396                     	;# 
   176  039A                     	;# 
   177  039C                     	;# 
   178  039D                     	;# 
   179  039E                     	;# 
   180  039F                     	;# 
   181  0415                     	;# 
   182  0416                     	;# 
   183  0417                     	;# 
   184  041C                     	;# 
   185  041D                     	;# 
   186  041E                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000D                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0013                     	;# 
   215  0014                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  001E                     	;# 
   226  001F                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  0091                     	;# 
   230  0092                     	;# 
   231  0093                     	;# 
   232  0094                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0098                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  0111                     	;# 
   247  0112                     	;# 
   248  0113                     	;# 
   249  0114                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011A                     	;# 
   256  011B                     	;# 
   257  011D                     	;# 
   258  011E                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019C                     	;# 
   278  019D                     	;# 
   279  019E                     	;# 
   280  019F                     	;# 
   281  020C                     	;# 
   282  020D                     	;# 
   283  0211                     	;# 
   284  0211                     	;# 
   285  0212                     	;# 
   286  0212                     	;# 
   287  0213                     	;# 
   288  0213                     	;# 
   289  0214                     	;# 
   290  0214                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0215                     	;# 
   294  0216                     	;# 
   295  0216                     	;# 
   296  0217                     	;# 
   297  0217                     	;# 
   298  0219                     	;# 
   299  021A                     	;# 
   300  021B                     	;# 
   301  021C                     	;# 
   302  021D                     	;# 
   303  021E                     	;# 
   304  021F                     	;# 
   305  0291                     	;# 
   306  0291                     	;# 
   307  0292                     	;# 
   308  0293                     	;# 
   309  0294                     	;# 
   310  0295                     	;# 
   311  0295                     	;# 
   312  0296                     	;# 
   313  0298                     	;# 
   314  0298                     	;# 
   315  0299                     	;# 
   316  029A                     	;# 
   317  029B                     	;# 
   318  029C                     	;# 
   319  029C                     	;# 
   320  029D                     	;# 
   321  029E                     	;# 
   322  029E                     	;# 
   323  0311                     	;# 
   324  0311                     	;# 
   325  0312                     	;# 
   326  0313                     	;# 
   327  0318                     	;# 
   328  0318                     	;# 
   329  0319                     	;# 
   330  031A                     	;# 
   331  0394                     	;# 
   332  0395                     	;# 
   333  0396                     	;# 
   334  039A                     	;# 
   335  039C                     	;# 
   336  039D                     	;# 
   337  039E                     	;# 
   338  039F                     	;# 
   339  0415                     	;# 
   340  0416                     	;# 
   341  0417                     	;# 
   342  041C                     	;# 
   343  041D                     	;# 
   344  041E                     	;# 
   345  0FE4                     	;# 
   346  0FE5                     	;# 
   347  0FE6                     	;# 
   348  0FE7                     	;# 
   349  0FE8                     	;# 
   350  0FE9                     	;# 
   351  0FEA                     	;# 
   352  0FEB                     	;# 
   353  0FED                     	;# 
   354  0FEE                     	;# 
   355  0FEF                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  0011                     	;# 
   371  0012                     	;# 
   372  0013                     	;# 
   373  0014                     	;# 
   374  0015                     	;# 
   375  0016                     	;# 
   376  0016                     	;# 
   377  0017                     	;# 
   378  0018                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001C                     	;# 
   383  001E                     	;# 
   384  001F                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0094                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009A                     	;# 
   397  009B                     	;# 
   398  009B                     	;# 
   399  009C                     	;# 
   400  009D                     	;# 
   401  009E                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  0111                     	;# 
   405  0112                     	;# 
   406  0113                     	;# 
   407  0114                     	;# 
   408  0115                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  0118                     	;# 
   412  0119                     	;# 
   413  011A                     	;# 
   414  011B                     	;# 
   415  011D                     	;# 
   416  011E                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0191                     	;# 
   420  0191                     	;# 
   421  0192                     	;# 
   422  0193                     	;# 
   423  0193                     	;# 
   424  0193                     	;# 
   425  0194                     	;# 
   426  0195                     	;# 
   427  0196                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019C                     	;# 
   435  019C                     	;# 
   436  019D                     	;# 
   437  019E                     	;# 
   438  019F                     	;# 
   439  020C                     	;# 
   440  020D                     	;# 
   441  0211                     	;# 
   442  0211                     	;# 
   443  0212                     	;# 
   444  0212                     	;# 
   445  0213                     	;# 
   446  0213                     	;# 
   447  0214                     	;# 
   448  0214                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0216                     	;# 
   453  0216                     	;# 
   454  0217                     	;# 
   455  0217                     	;# 
   456  0219                     	;# 
   457  021A                     	;# 
   458  021B                     	;# 
   459  021C                     	;# 
   460  021D                     	;# 
   461  021E                     	;# 
   462  021F                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0294                     	;# 
   468  0295                     	;# 
   469  0295                     	;# 
   470  0296                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  029B                     	;# 
   476  029C                     	;# 
   477  029C                     	;# 
   478  029D                     	;# 
   479  029E                     	;# 
   480  029E                     	;# 
   481  0311                     	;# 
   482  0311                     	;# 
   483  0312                     	;# 
   484  0313                     	;# 
   485  0318                     	;# 
   486  0318                     	;# 
   487  0319                     	;# 
   488  031A                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  039A                     	;# 
   493  039C                     	;# 
   494  039D                     	;# 
   495  039E                     	;# 
   496  039F                     	;# 
   497  0415                     	;# 
   498  0416                     	;# 
   499  0417                     	;# 
   500  041C                     	;# 
   501  041D                     	;# 
   502  041E                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514                           
   515                           	psect	idataBANK0
   516  03B1                     __pidataBANK0:	
   517                           
   518                           ;initializer for _dat0
   519  03B1  34FF               	retlw	255
   520  03B2  34FF               	retlw	255
   521                           
   522                           ;initializer for _dat1
   523  03B3  34FF               	retlw	255
   524  03B4  34FF               	retlw	255
   525                           
   526                           	psect	nvBANK0
   527  004C                     __pnvBANK0:	
   528  004C                     _uart_rec_buff:	
   529  004C                     	ds	1
   530  000C                     _PORTA	set	12
   531  000D                     _PORTB	set	13
   532  005F                     _GIE	set	95
   533  005E                     _PEIE	set	94
   534  008D                     _RCIF	set	141
   535  009B                     _TMR6IF	set	155
   536  0098                     _OSCTUNE	set	152
   537  008C                     _TRISA	set	140
   538  008D                     _TRISB	set	141
   539  04CB                     _IRCF0	set	1227
   540  04CC                     _IRCF1	set	1228
   541  04CD                     _IRCF2	set	1229
   542  04CE                     _IRCF3	set	1230
   543  048D                     _RCIE	set	1165
   544  04AF                     _nWPUEN	set	1199
   545  08EB                     _CCP2SEL	set	2283
   546  08EF                     _RXDTSEL	set	2287
   547  08F0                     _TXCKSEL	set	2288
   548  018C                     _ANSELA	set	396
   549  018D                     _ANSELB	set	397
   550  0199                     _RCREG	set	409
   551  019B                     _SPBRG	set	411
   552  019A                     _TXREG	set	410
   553  0CFB                     _BRG16	set	3323
   554  0CF2                     _BRGH	set	3314
   555  0CEC                     _CREN	set	3308
   556  0CEF                     _SPEN	set	3311
   557  0CF4                     _SYNC	set	3316
   558  0CF1                     _TRMT	set	3313
   559  0CF5                     _TXEN	set	3317
   560  020D                     _WPUB	set	525
   561  0293                     _CCP1CON	set	659
   562  029A                     _CCP2CON	set	666
   563  0291                     _CCPR1L	set	657
   564  0298                     _CCPR2L	set	664
   565  029E                     _CCPTMRS	set	670
   566  0313                     _CCP3CON	set	787
   567  031A                     _CCP4CON	set	794
   568  0311                     _CCPR3L	set	785
   569  0318                     _CCPR4L	set	792
   570  041D                     _PR6	set	1053
   571  041E                     _T6CON	set	1054
   572                           
   573                           ; #config settings
   574  0000                     
   575                           	psect	cinit
   576  006A                     start_initialization:	
   577  006A                     __initialization:	
   578                           
   579                           ; Clear objects allocated to BANK0
   580  006A  3020               	movlw	low __pbssBANK0
   581  006B  0084               	movwf	4
   582  006C  3000               	movlw	high __pbssBANK0
   583  006D  0085               	movwf	5
   584  006E  301D               	movlw	29
   585  006F  3183  23A6  3180   	fcall	clear_ram0
   586                           
   587                           ; Clear objects allocated to BANK1
   588  0072  30A0               	movlw	low __pbssBANK1
   589  0073  0084               	movwf	4
   590  0074  3000               	movlw	high __pbssBANK1
   591  0075  0085               	movwf	5
   592  0076  3032               	movlw	50
   593  0077  3183  23A6  3180   	fcall	clear_ram0
   594                           
   595                           ; Initialize objects allocated to BANK0
   596  007A  3183  23B1  3180   	fcall	__pidataBANK0	;fetch initializer
   597  007D  00C8               	movwf	__pdataBANK0& (0+127)
   598  007E  3183  23B2  3180   	fcall	__pidataBANK0+1	;fetch initializer
   599  0081  00C9               	movwf	(__pdataBANK0+1)& (0+127)
   600  0082  3183  23B3  3180   	fcall	__pidataBANK0+2	;fetch initializer
   601  0085  00CA               	movwf	(__pdataBANK0+2)& (0+127)
   602  0086  3183  23B4         	fcall	__pidataBANK0+3	;fetch initializer
   603  0088  00CB               	movwf	(__pdataBANK0+3)& (0+127)
   604  0089                     end_of_initialization:	
   605                           ;End of C runtime variable initialization code
   606                           
   607  0089                     __end_of__initialization:	
   608  0089  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   609  008A  0020               	movlb	0
   610  008B  3180  288D         	ljmp	_main	;jump to C main() function
   611                           
   612                           	psect	bssBANK0
   613  0020                     __pbssBANK0:	
   614  0020                     _status:	
   615  0020                     	ds	1
   616  0021                     _usestr:	
   617  0021                     	ds	1
   618  0022                     _arg0buff:	
   619  0022                     	ds	9
   620  002B                     _arg1buff:	
   621  002B                     	ds	9
   622  0034                     _cmdbuff:	
   623  0034                     	ds	9
   624                           
   625                           	psect	dataBANK0
   626  0048                     __pdataBANK0:	
   627  0048                     _dat0:	
   628  0048                     	ds	2
   629  004A                     _dat1:	
   630  004A                     	ds	2
   631                           
   632                           	psect	bssBANK1
   633  00A0                     __pbssBANK1:	
   634  00A0                     _uart_rec_buff_:	
   635  00A0                     	ds	50
   636                           
   637                           	psect	clrtext
   638  03A6                     clear_ram0:	
   639                           ;	Called with FSR0 containing the base address, and
   640                           ;	WREG with the size to clear
   641                           
   642  03A6  0064               	clrwdt	;clear the watchdog before getting into this loop
   643  03A7                     clrloop0:	
   644  03A7  0180               	clrf	0	;clear RAM location pointed to by FSR
   645  03A8  3101               	addfsr 0,1
   646  03A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   647  03AA  2BA7               	goto	clrloop0	;have we reached the end yet?
   648  03AB  3400               	retlw	0	;all done for this memory range, return
   649                           
   650                           	psect	cstackCOMMON
   651  0070                     __pcstackCOMMON:	
   652  0070                     ?_ringbufferInit:	
   653  0070                     ?_initFrequency:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_initRegisters:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_initVariables:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_initUART:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_initTMR6:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_initPWM1:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_initPWM2:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_initPWM3:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_initPWM4:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_initInt:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_getPicAddr:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_getSAddr:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_getData:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_ISR:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?i1_setDutyPWM1:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?i1_setDutyPWM2:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?i1_setDutyPWM3:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?i1_setDutyPWM4:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     getPicAddr@d1:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     getSAddr@d1:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     getData@d1:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     i1setDutyPWM1@duty:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     i1setDutyPWM2@duty:	
   720                           ; 2 bytes @ 0x0
   721                           
   722  0070                     i1setDutyPWM3@duty:	
   723                           ; 2 bytes @ 0x0
   724                           
   725  0070                     i1setDutyPWM4@duty:	
   726                           ; 2 bytes @ 0x0
   727                           
   728                           
   729                           ; 2 bytes @ 0x0
   730  0070                     	ds	1
   731  0071                     ??_getPicAddr:	
   732  0071                     ??_getSAddr:	
   733                           ; 1 bytes @ 0x1
   734                           
   735  0071                     ??_getData:	
   736                           ; 1 bytes @ 0x1
   737                           
   738                           
   739                           ; 1 bytes @ 0x1
   740  0071                     	ds	1
   741  0072                     ??i1_setDutyPWM1:	
   742  0072                     ??i1_setDutyPWM2:	
   743                           ; 1 bytes @ 0x2
   744                           
   745  0072                     ??i1_setDutyPWM3:	
   746                           ; 1 bytes @ 0x2
   747                           
   748  0072                     ??i1_setDutyPWM4:	
   749                           ; 1 bytes @ 0x2
   750                           
   751  0072                     getPicAddr@d0:	
   752                           ; 1 bytes @ 0x2
   753                           
   754  0072                     getSAddr@d0:	
   755                           ; 1 bytes @ 0x2
   756                           
   757                           
   758                           ; 1 bytes @ 0x2
   759  0072                     	ds	1
   760  0073                     getData@d0:	
   761                           
   762                           ; 1 bytes @ 0x3
   763  0073                     	ds	1
   764  0074                     getData@ret:	
   765                           
   766                           ; 1 bytes @ 0x4
   767  0074                     	ds	1
   768  0075                     ?_setServo:	
   769  0075                     setServo@val:	
   770                           ; 1 bytes @ 0x5
   771                           
   772                           
   773                           ; 1 bytes @ 0x5
   774  0075                     	ds	1
   775  0076                     ??_setServo:	
   776                           
   777                           ; 1 bytes @ 0x6
   778  0076                     	ds	2
   779  0078                     setServo@id:	
   780                           
   781                           ; 1 bytes @ 0x8
   782  0078                     	ds	1
   783  0079                     ??_ISR:	
   784                           
   785                           ; 1 bytes @ 0x9
   786  0079                     	ds	4
   787                           
   788                           	psect	cstackBANK0
   789  003D                     __pcstackBANK0:	
   790  003D                     ??_ringbufferInit:	
   791  003D                     ?_memset:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  003D                     ??_initFrequency:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  003D                     ??_initRegisters:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  003D                     ??_initUART:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  003D                     ??_initTMR6:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  003D                     ?_setDutyPWM1:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  003D                     ?_setDutyPWM2:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  003D                     ?_setDutyPWM3:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  003D                     ?_setDutyPWM4:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  003D                     ??_initInt:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  003D                     ringbufferInit@rb:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  003D                     memset@val:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  003D                     setDutyPWM1@duty:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  003D                     setDutyPWM2@duty:	
   831                           ; 2 bytes @ 0x0
   832                           
   833  003D                     setDutyPWM3@duty:	
   834                           ; 2 bytes @ 0x0
   835                           
   836  003D                     setDutyPWM4@duty:	
   837                           ; 2 bytes @ 0x0
   838                           
   839                           
   840                           ; 2 bytes @ 0x0
   841  003D                     	ds	1
   842  003E                     memset@len:	
   843                           
   844                           ; 1 bytes @ 0x1
   845  003E                     	ds	1
   846  003F                     ??_memset:	
   847  003F                     ??_setDutyPWM1:	
   848                           ; 1 bytes @ 0x2
   849                           
   850  003F                     ??_setDutyPWM2:	
   851                           ; 1 bytes @ 0x2
   852                           
   853  003F                     ??_setDutyPWM3:	
   854                           ; 1 bytes @ 0x2
   855                           
   856  003F                     ??_setDutyPWM4:	
   857                           ; 1 bytes @ 0x2
   858                           
   859                           
   860                           ; 1 bytes @ 0x2
   861  003F                     	ds	2
   862  0041                     ??_initPWM1:	
   863  0041                     ??_initPWM2:	
   864                           ; 1 bytes @ 0x4
   865                           
   866  0041                     ??_initPWM3:	
   867                           ; 1 bytes @ 0x4
   868                           
   869  0041                     ??_initPWM4:	
   870                           ; 1 bytes @ 0x4
   871                           
   872  0041                     memset@str:	
   873                           ; 1 bytes @ 0x4
   874                           
   875                           
   876                           ; 1 bytes @ 0x4
   877  0041                     	ds	1
   878  0042                     memset@i:	
   879                           
   880                           ; 1 bytes @ 0x5
   881  0042                     	ds	1
   882  0043                     ??_initVariables:	
   883                           
   884                           ; 1 bytes @ 0x6
   885  0043                     	ds	1
   886  0044                     ?_main:	
   887  0044                     main@argc:	
   888                           ; 2 bytes @ 0x7
   889                           
   890                           
   891                           ; 2 bytes @ 0x7
   892  0044                     	ds	2
   893  0046                     main@argv:	
   894                           
   895                           ; 2 bytes @ 0x9
   896  0046                     	ds	2
   897  0048                     ??_main:	
   898                           
   899                           	psect	maintext
   900  008D                     __pmaintext:	
   901                           ; 1 bytes @ 0xB
   902 ;;
   903 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   904 ;;
   905 ;; *************** function _main *****************
   906 ;; Defined at:
   907 ;;		line 123 in file "main_v_1_0.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  argc            2    7[BANK0 ] int 
   910 ;;  argv            2    9[BANK0 ] PTR PTR unsigned char 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  2    7[BANK0 ] int 
   915 ;; Registers used:
   916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   917 ;; Tracked objects:
   918 ;;		On entry : B1F/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   922 ;;      Params:         0       4       0       0       0       0
   923 ;;      Locals:         0       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0
   925 ;;      Totals:         0       4       0       0       0       0
   926 ;;Total ram usage:        4 bytes
   927 ;; Hardware stack levels required when called:    5
   928 ;; This function calls:
   929 ;;		_initFrequency
   930 ;;		_initInt
   931 ;;		_initPWM1
   932 ;;		_initPWM2
   933 ;;		_initPWM3
   934 ;;		_initPWM4
   935 ;;		_initRegisters
   936 ;;		_initTMR6
   937 ;;		_initUART
   938 ;;		_initVariables
   939 ;;		_setDutyPWM1
   940 ;;		_setDutyPWM2
   941 ;;		_setDutyPWM3
   942 ;;		_setDutyPWM4
   943 ;; This function is called by:
   944 ;;		Startup code after reset
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _main
   950  008D                     _main:	
   951                           
   952                           ;main_v_1_0.c: 124: initFrequency();
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   956  008D  3183  239F  3180   	fcall	_initFrequency
   957                           
   958                           ;main_v_1_0.c: 125: initRegisters();
   959  0090  3183  234E  3180   	fcall	_initRegisters
   960                           
   961                           ;main_v_1_0.c: 126: initVariables();
   962  0093  3182  2299  3180   	fcall	_initVariables
   963                           
   964                           ;main_v_1_0.c: 127: initUART();
   965  0096  3183  2361  3180   	fcall	_initUART
   966                           
   967                           ;main_v_1_0.c: 128: initTMR6();
   968  0099  3183  2398  3180   	fcall	_initTMR6
   969                           
   970                           ;main_v_1_0.c: 129: initPWM1();
   971  009C  3183  230B  3180   	fcall	_initPWM1
   972                           
   973                           ;main_v_1_0.c: 130: initPWM2();
   974  009F  3182  22C1  3180   	fcall	_initPWM2
   975                           
   976                           ;main_v_1_0.c: 131: initPWM3();
   977  00A2  3182  22F3  3180   	fcall	_initPWM3
   978                           
   979                           ;main_v_1_0.c: 132: initPWM4();
   980  00A5  3182  22DB  3180   	fcall	_initPWM4
   981                           
   982                           ;main_v_1_0.c: 133: initInt();
   983  00A8  3183  23AC  3180   	fcall	_initInt
   984                           
   985                           ;main_v_1_0.c: 134: setDutyPWM1(96);
   986  00AB  3060               	movlw	96
   987  00AC  0020               	movlb	0	; select bank0
   988  00AD  00BD               	movwf	setDutyPWM1@duty
   989  00AE  3000               	movlw	0
   990  00AF  00BE               	movwf	setDutyPWM1@duty+1
   991  00B0  3181  21A4  3180   	fcall	_setDutyPWM1
   992                           
   993                           ;main_v_1_0.c: 135: setDutyPWM2(96);
   994  00B3  3060               	movlw	96
   995  00B4  0020               	movlb	0	; select bank0
   996  00B5  00BD               	movwf	setDutyPWM2@duty
   997  00B6  3000               	movlw	0
   998  00B7  00BE               	movwf	setDutyPWM2@duty+1
   999  00B8  3181  216F  3180   	fcall	_setDutyPWM2
  1000                           
  1001                           ;main_v_1_0.c: 136: setDutyPWM3(96);
  1002  00BB  3060               	movlw	96
  1003  00BC  0020               	movlb	0	; select bank0
  1004  00BD  00BD               	movwf	setDutyPWM3@duty
  1005  00BE  3000               	movlw	0
  1006  00BF  00BE               	movwf	setDutyPWM3@duty+1
  1007  00C0  3181  213A  3180   	fcall	_setDutyPWM3
  1008                           
  1009                           ;main_v_1_0.c: 137: setDutyPWM4(96);
  1010  00C3  3060               	movlw	96
  1011  00C4  0020               	movlb	0	; select bank0
  1012  00C5  00BD               	movwf	setDutyPWM4@duty
  1013  00C6  3000               	movlw	0
  1014  00C7  00BE               	movwf	setDutyPWM4@duty+1
  1015  00C8  3181  2105  3180   	fcall	_setDutyPWM4
  1016  00CB                     l393:	
  1017                           ;main_v_1_0.c: 139: while (1) {
  1018                           
  1019  00CB  28CB               	goto	l393
  1020  00CC                     __end_of_main:	
  1021                           
  1022                           	psect	text1
  1023  0105                     __ptext1:	
  1024 ;; *************** function _setDutyPWM4 *****************
  1025 ;; Defined at:
  1026 ;;		line 169 in file "main_base.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  duty            2    0[BANK0 ] unsigned int 
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;		None
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  1    wreg      void 
  1033 ;; Registers used:
  1034 ;;		wreg, status,2, status,0
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1040 ;;      Params:         0       2       0       0       0       0
  1041 ;;      Locals:         0       0       0       0       0       0
  1042 ;;      Temps:          0       2       0       0       0       0
  1043 ;;      Totals:         0       4       0       0       0       0
  1044 ;;Total ram usage:        4 bytes
  1045 ;; Hardware stack levels used:    1
  1046 ;; Hardware stack levels required when called:    3
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		_main
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           
  1055                           ;psect for function _setDutyPWM4
  1056  0105                     _setDutyPWM4:	
  1057                           
  1058                           ;main_base.c: 171: if (duty < 36)
  1059                           
  1060                           ;incstack = 0
  1061                           ; Regs used in _setDutyPWM4: [wreg+status,2+status,0]
  1062  0105  3000               	movlw	0
  1063  0106  0020               	movlb	0	; select bank0
  1064  0107  023E               	subwf	setDutyPWM4@duty+1,w
  1065  0108  3024               	movlw	36
  1066  0109  1903               	skipnz
  1067  010A  023D               	subwf	setDutyPWM4@duty,w
  1068  010B  1803               	skipnc
  1069  010C  290F               	goto	l1572
  1070                           
  1071                           ;main_base.c: 172: duty = 36;
  1072  010D  3024               	movlw	36
  1073  010E  2917               	goto	L1
  1074  010F                     l1572:	
  1075                           
  1076                           ;main_base.c: 173: else if (duty > 157)
  1077  010F  3000               	movlw	0
  1078  0110  023E               	subwf	setDutyPWM4@duty+1,w
  1079  0111  309E               	movlw	158
  1080  0112  1903               	skipnz
  1081  0113  023D               	subwf	setDutyPWM4@duty,w
  1082  0114  1C03               	skipc
  1083  0115  291A               	goto	l1576
  1084                           
  1085                           ;main_base.c: 174: duty = 157;
  1086  0116  309D               	movlw	157
  1087  0117                     L1:	
  1088  0117  00BD               	movwf	setDutyPWM4@duty
  1089  0118  3000               	movlw	0
  1090  0119  00BE               	movwf	setDutyPWM4@duty+1
  1091  011A                     l1576:	
  1092                           
  1093                           ;main_base.c: 180: CCP4CON &= ~0b00110000;
  1094  011A  30CF               	movlw	207
  1095  011B  00BF               	movwf	??_setDutyPWM4
  1096  011C  083F               	movf	??_setDutyPWM4,w
  1097  011D  0026               	movlb	6	; select bank6
  1098  011E  059A               	andwf	26,f	;volatile
  1099                           
  1100                           ;main_base.c: 181: CCP4CON |= (duty & 0x02) << 4 ;
  1101  011F  0020               	movlb	0	; select bank0
  1102  0120  083D               	movf	setDutyPWM4@duty,w
  1103  0121  3902               	andlw	2
  1104  0122  00BF               	movwf	??_setDutyPWM4
  1105  0123  3003               	movlw	3
  1106  0124                     u1245:	
  1107  0124  35BF               	lslf	??_setDutyPWM4,f
  1108  0125  3EFF               	addlw	-1
  1109  0126  1D03               	skipz
  1110  0127  2924               	goto	u1245
  1111  0128  353F               	lslf	??_setDutyPWM4,w
  1112  0129  00C0               	movwf	??_setDutyPWM4+1
  1113  012A  0840               	movf	??_setDutyPWM4+1,w
  1114  012B  0026               	movlb	6	; select bank6
  1115  012C  049A               	iorwf	26,f	;volatile
  1116                           
  1117                           ;main_base.c: 182: CCPR4L = (uint8_t) (duty >> 2);
  1118  012D  0020               	movlb	0	; select bank0
  1119  012E  083E               	movf	setDutyPWM4@duty+1,w
  1120  012F  00C0               	movwf	??_setDutyPWM4+1
  1121  0130  083D               	movf	setDutyPWM4@duty,w
  1122  0131  00BF               	movwf	??_setDutyPWM4
  1123  0132  36C0               	lsrf	??_setDutyPWM4+1,f
  1124  0133  0CBF               	rrf	??_setDutyPWM4,f
  1125  0134  36C0               	lsrf	??_setDutyPWM4+1,f
  1126  0135  0CBF               	rrf	??_setDutyPWM4,f
  1127  0136  083F               	movf	??_setDutyPWM4,w
  1128  0137  0026               	movlb	6	; select bank6
  1129  0138  0098               	movwf	24	;volatile
  1130  0139  0008               	return
  1131  013A                     __end_of_setDutyPWM4:	
  1132                           
  1133                           	psect	text2
  1134  0299                     __ptext2:	
  1135 ;; *************** function _initVariables *****************
  1136 ;; Defined at:
  1137 ;;		line 48 in file "main_base.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1151 ;;      Params:         0       0       0       0       0       0
  1152 ;;      Locals:         0       0       0       0       0       0
  1153 ;;      Temps:          0       1       0       0       0       0
  1154 ;;      Totals:         0       1       0       0       0       0
  1155 ;;Total ram usage:        1 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    4
  1158 ;; This function calls:
  1159 ;;		_memset
  1160 ;;		_ringbufferInit
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _initVariables
  1168  0299                     _initVariables:	
  1169                           
  1170                           ;main_base.c: 49: uart_rec_buff = ringbufferInit(&uart_rec_buff_);
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _initVariables: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1174  0299  30A0               	movlw	(low (_uart_rec_buff_| 0))& (0+255)
  1175  029A  3183  2373  3182   	fcall	_ringbufferInit
  1176  029D  0020               	movlb	0	; select bank0
  1177  029E  00C3               	movwf	??_initVariables
  1178  029F  0843               	movf	??_initVariables,w
  1179  02A0  00CC               	movwf	_uart_rec_buff
  1180                           
  1181                           ;main_base.c: 50: memset(cmdbuff, 0, (8+1));
  1182  02A1  01BD               	clrf	memset@val
  1183  02A2  3009               	movlw	9
  1184  02A3  00C3               	movwf	??_initVariables
  1185  02A4  0843               	movf	??_initVariables,w
  1186  02A5  00BE               	movwf	memset@len
  1187  02A6  3034               	movlw	(low (_cmdbuff| 0))& (0+255)
  1188  02A7  3183  2323  3182   	fcall	_memset
  1189                           
  1190                           ;main_base.c: 51: memset(arg0buff, 0, (8+1));
  1191  02AA  0020               	movlb	0	; select bank0
  1192  02AB  01BD               	clrf	memset@val
  1193  02AC  3009               	movlw	9
  1194  02AD  00C3               	movwf	??_initVariables
  1195  02AE  0843               	movf	??_initVariables,w
  1196  02AF  00BE               	movwf	memset@len
  1197  02B0  3022               	movlw	(low (_arg0buff| 0))& (0+255)
  1198  02B1  3183  2323  3182   	fcall	_memset
  1199                           
  1200                           ;main_base.c: 52: memset(arg1buff, 0, (8+1));
  1201  02B4  0020               	movlb	0	; select bank0
  1202  02B5  01BD               	clrf	memset@val
  1203  02B6  3009               	movlw	9
  1204  02B7  00C3               	movwf	??_initVariables
  1205  02B8  0843               	movf	??_initVariables,w
  1206  02B9  00BE               	movwf	memset@len
  1207  02BA  302B               	movlw	(low (_arg1buff| 0))& (0+255)
  1208  02BB  3183  2323         	fcall	_memset
  1209                           
  1210                           ;main_base.c: 53: status = 0;
  1211  02BD  0020               	movlb	0	; select bank0
  1212  02BE  01A0               	clrf	_status
  1213                           
  1214                           ;main_base.c: 54: usestr = 0;
  1215  02BF  01A1               	clrf	_usestr
  1216  02C0  0008               	return
  1217  02C1                     __end_of_initVariables:	
  1218                           
  1219                           	psect	text3
  1220  0373                     __ptext3:	
  1221 ;; *************** function _ringbufferInit *****************
  1222 ;; Defined at:
  1223 ;;		line 13 in file "ringbuffer.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  rb              1    wreg     PTR struct ringbuffer
  1226 ;;		 -> uart_rec_buff_(50), 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  rb              1    0[BANK0 ] PTR struct ringbuffer
  1229 ;;		 -> uart_rec_buff_(50), 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      PTR struct ringbuffer
  1232 ;; Registers used:
  1233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1239 ;;      Params:         0       0       0       0       0       0
  1240 ;;      Locals:         0       1       0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0       0
  1242 ;;      Totals:         0       1       0       0       0       0
  1243 ;;Total ram usage:        1 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    3
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_initVariables
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           
  1254                           ;psect for function _ringbufferInit
  1255  0373                     _ringbufferInit:	
  1256                           
  1257                           ;incstack = 0
  1258                           ; Regs used in _ringbufferInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  1259                           ;ringbufferInit@rb stored from wreg
  1260  0373  0020               	movlb	0	; select bank0
  1261  0374  00BD               	movwf	ringbufferInit@rb
  1262                           
  1263                           ;ringbuffer.c: 14: if (rb == (0))
  1264  0375  083D               	movf	ringbufferInit@rb,w
  1265  0376  1D03               	btfss	3,2
  1266  0377  2B7A               	goto	l1388
  1267                           
  1268                           ;ringbuffer.c: 15: return (0);
  1269  0378  3000               	movlw	0
  1270  0379  0008               	return
  1271  037A                     l1388:	
  1272                           
  1273                           ;ringbuffer.c: 16: rb->pp = 0;
  1274  037A  083D               	movf	ringbufferInit@rb,w
  1275  037B  0086               	movwf	6
  1276  037C  0187               	clrf	7
  1277  037D  0181               	clrf	1
  1278                           
  1279                           ;ringbuffer.c: 17: rb->gp = 0;
  1280  037E  0A3D               	incf	ringbufferInit@rb,w
  1281  037F  0086               	movwf	6
  1282  0380  0187               	clrf	7
  1283  0381  0181               	clrf	1
  1284                           
  1285                           ;ringbuffer.c: 19: return rb;
  1286  0382  083D               	movf	ringbufferInit@rb,w
  1287  0383  0008               	return
  1288  0384                     __end_of_ringbufferInit:	
  1289                           
  1290                           	psect	text4
  1291  0323                     __ptext4:	
  1292 ;; *************** function _memset *****************
  1293 ;; Defined at:
  1294 ;;		line 13 in file "stdfc.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  str             1    wreg     PTR unsigned char 
  1297 ;;		 -> arg1buff(9), arg0buff(9), cmdbuff(9), 
  1298 ;;  val             1    0[BANK0 ] unsigned char 
  1299 ;;  len             1    1[BANK0 ] unsigned char 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  str             1    4[BANK0 ] PTR unsigned char 
  1302 ;;		 -> arg1buff(9), arg0buff(9), cmdbuff(9), 
  1303 ;;  i               1    5[BANK0 ] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1313 ;;      Params:         0       2       0       0       0       0
  1314 ;;      Locals:         0       2       0       0       0       0
  1315 ;;      Temps:          0       2       0       0       0       0
  1316 ;;      Totals:         0       6       0       0       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    3
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_initVariables
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function _memset
  1329  0323                     _memset:	
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  1333                           ;memset@str stored from wreg
  1334  0323  0020               	movlb	0	; select bank0
  1335  0324  00C1               	movwf	memset@str
  1336                           
  1337                           ;stdfc.c: 14: uint8_t i;
  1338                           ;stdfc.c: 15: for (i = 0; i < len; i++)
  1339  0325  01C2               	clrf	memset@i
  1340  0326                     l1400:	
  1341  0326  083E               	movf	memset@len,w
  1342  0327  0242               	subwf	memset@i,w
  1343  0328  1803               	btfsc	3,0
  1344  0329  0008               	return
  1345                           
  1346                           ;stdfc.c: 16: str[i] = val;
  1347  032A  083D               	movf	memset@val,w
  1348  032B  00BF               	movwf	??_memset
  1349  032C  0842               	movf	memset@i,w
  1350  032D  0741               	addwf	memset@str,w
  1351  032E  00C0               	movwf	??_memset+1
  1352  032F  0840               	movf	??_memset+1,w
  1353  0330  0086               	movwf	6
  1354  0331  0187               	clrf	7
  1355  0332  083F               	movf	??_memset,w
  1356  0333  0081               	movwf	1
  1357  0334  3001               	movlw	1
  1358  0335  00BF               	movwf	??_memset
  1359  0336  083F               	movf	??_memset,w
  1360  0337  07C2               	addwf	memset@i,f
  1361  0338  2B26               	goto	l1400
  1362  0339                     __end_of_memset:	
  1363                           
  1364                           	psect	text5
  1365  0361                     __ptext5:	
  1366 ;; *************** function _initUART *****************
  1367 ;; Defined at:
  1368 ;;		line 57 in file "main_base.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1382 ;;      Params:         0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    3
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_main
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           
  1397                           ;psect for function _initUART
  1398  0361                     _initUART:	
  1399                           
  1400                           ;main_base.c: 58: RXDTSEL = 0;
  1401                           
  1402                           ;incstack = 0
  1403                           ; Regs used in _initUART: [wreg]
  1404  0361  0022               	movlb	2	; select bank2
  1405  0362  139D               	bcf	29,7	;volatile
  1406                           
  1407                           ;main_base.c: 59: TXCKSEL = 0;
  1408  0363  101E               	bcf	30,0	;volatile
  1409                           
  1410                           ;main_base.c: 61: CREN = 1;
  1411  0364  0023               	movlb	3	; select bank3
  1412  0365  161D               	bsf	29,4	;volatile
  1413                           
  1414                           ;main_base.c: 62: TXEN = 1;
  1415  0366  169E               	bsf	30,5	;volatile
  1416                           
  1417                           ;main_base.c: 63: SYNC = 0;
  1418  0367  121E               	bcf	30,4	;volatile
  1419                           
  1420                           ;main_base.c: 66: BRGH = 0;
  1421  0368  111E               	bcf	30,2	;volatile
  1422                           
  1423                           ;main_base.c: 67: BRG16 = 1;
  1424  0369  159F               	bsf	31,3	;volatile
  1425                           
  1426                           ;main_base.c: 68: SPBRG = 25;
  1427  036A  3019               	movlw	25
  1428  036B  009B               	movwf	27	;volatile
  1429                           
  1430                           ;main_base.c: 70: SPEN = 1;
  1431  036C  179D               	bsf	29,7	;volatile
  1432  036D                     l1526:	
  1433                           ;main_base.c: 72: while (RCIF)
  1434                           
  1435  036D  0020               	movlb	0	; select bank0
  1436  036E  1E91               	btfss	17,5	;volatile
  1437  036F  0008               	return
  1438                           
  1439                           ;main_base.c: 73: RCREG;
  1440  0370  0023               	movlb	3	; select bank3
  1441  0371  0819               	movf	25,w	;volatile
  1442  0372  2B6D               	goto	l1526
  1443  0373                     __end_of_initUART:	
  1444                           
  1445                           	psect	text6
  1446  0398                     __ptext6:	
  1447 ;; *************** function _initTMR6 *****************
  1448 ;; Defined at:
  1449 ;;		line 76 in file "main_base.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1463 ;;      Params:         0       0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    3
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_main
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           
  1478                           ;psect for function _initTMR6
  1479  0398                     _initTMR6:	
  1480                           
  1481                           ;main_base.c: 77: PR6 = 0xff;
  1482                           
  1483                           ;incstack = 0
  1484                           ; Regs used in _initTMR6: [wreg]
  1485  0398  30FF               	movlw	255
  1486  0399  0028               	movlb	8	; select bank8
  1487  039A  009D               	movwf	29	;volatile
  1488                           
  1489                           ;main_base.c: 78: T6CON = 0b00000011;
  1490  039B  3003               	movlw	3
  1491  039C  009E               	movwf	30	;volatile
  1492                           
  1493                           ;main_base.c: 79: T6CON |= 0x04;
  1494  039D  151E               	bsf	30,2	;volatile
  1495  039E  0008               	return
  1496  039F                     __end_of_initTMR6:	
  1497                           
  1498                           	psect	text7
  1499  034E                     __ptext7:	
  1500 ;; *************** function _initRegisters *****************
  1501 ;; Defined at:
  1502 ;;		line 35 in file "main_base.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;		None
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;		None
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, status,2
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1516 ;;      Params:         0       0       0       0       0       0
  1517 ;;      Locals:         0       0       0       0       0       0
  1518 ;;      Temps:          0       0       0       0       0       0
  1519 ;;      Totals:         0       0       0       0       0       0
  1520 ;;Total ram usage:        0 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    3
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_main
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           
  1531                           ;psect for function _initRegisters
  1532  034E                     _initRegisters:	
  1533                           
  1534                           ;main_base.c: 36: PORTA = 0b00000000;
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in _initRegisters: [wreg+status,2]
  1538  034E  0020               	movlb	0	; select bank0
  1539  034F  018C               	clrf	12	;volatile
  1540                           
  1541                           ;main_base.c: 37: ANSELA = 0b00000000;
  1542  0350  0023               	movlb	3	; select bank3
  1543  0351  018C               	clrf	12	;volatile
  1544                           
  1545                           ;main_base.c: 38: TRISA = 0b00000000;
  1546  0352  0021               	movlb	1	; select bank1
  1547  0353  018C               	clrf	12	;volatile
  1548                           
  1549                           ;main_base.c: 40: PORTB = 0b00000000;
  1550  0354  0020               	movlb	0	; select bank0
  1551  0355  018D               	clrf	13	;volatile
  1552                           
  1553                           ;main_base.c: 41: ANSELB = 0b00000000;
  1554  0356  0023               	movlb	3	; select bank3
  1555  0357  018D               	clrf	13	;volatile
  1556                           
  1557                           ;main_base.c: 42: TRISB = 0b00010010;
  1558  0358  3012               	movlw	18
  1559  0359  0021               	movlb	1	; select bank1
  1560  035A  008D               	movwf	13	;volatile
  1561                           
  1562                           ;main_base.c: 44: WPUB = 0b00010000;
  1563  035B  3010               	movlw	16
  1564  035C  0024               	movlb	4	; select bank4
  1565  035D  008D               	movwf	13	;volatile
  1566                           
  1567                           ;main_base.c: 45: nWPUEN = 0;
  1568  035E  0021               	movlb	1	; select bank1
  1569  035F  1395               	bcf	21,7	;volatile
  1570  0360  0008               	return
  1571  0361                     __end_of_initRegisters:	
  1572                           
  1573                           	psect	text8
  1574  02DB                     __ptext8:	
  1575 ;; *************** function _initPWM4 *****************
  1576 ;; Defined at:
  1577 ;;		line 186 in file "main_base.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;		None
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, status,2, status,0, pclath, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1591 ;;      Params:         0       0       0       0       0       0
  1592 ;;      Locals:         0       0       0       0       0       0
  1593 ;;      Temps:          0       1       0       0       0       0
  1594 ;;      Totals:         0       1       0       0       0       0
  1595 ;;Total ram usage:        1 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    4
  1598 ;; This function calls:
  1599 ;;		_setDutyPWM3
  1600 ;; This function is called by:
  1601 ;;		_main
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           
  1606                           ;psect for function _initPWM4
  1607  02DB                     _initPWM4:	
  1608                           
  1609                           ;main_base.c: 188: TRISA |= 1 << 4;
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in _initPWM4: [wreg+status,2+status,0+pclath+cstack]
  1613  02DB  0021               	movlb	1	; select bank1
  1614  02DC  160C               	bsf	12,4	;volatile
  1615                           
  1616                           ;main_base.c: 189: CCP4CON = 0b00001100;
  1617  02DD  300C               	movlw	12
  1618  02DE  0026               	movlb	6	; select bank6
  1619  02DF  009A               	movwf	26	;volatile
  1620                           
  1621                           ;main_base.c: 190: setDutyPWM3(0);
  1622  02E0  3000               	movlw	0
  1623  02E1  0020               	movlb	0	; select bank0
  1624  02E2  00BD               	movwf	setDutyPWM3@duty
  1625  02E3  00BE               	movwf	setDutyPWM3@duty+1
  1626  02E4  3181  213A  3182   	fcall	_setDutyPWM3
  1627                           
  1628                           ;main_base.c: 191: CCPTMRS |= 0x02 << 6;
  1629  02E7  0025               	movlb	5	; select bank5
  1630  02E8  179E               	bsf	30,7	;volatile
  1631                           
  1632                           ;main_base.c: 192: TMR6IF = 0;
  1633  02E9  0020               	movlb	0	; select bank0
  1634  02EA  1193               	bcf	19,3	;volatile
  1635  02EB                     l289:	
  1636                           ;main_base.c: 193: while(!TMR6IF);
  1637                           
  1638  02EB  1D93               	btfss	19,3	;volatile
  1639  02EC  2AEB               	goto	l289
  1640                           
  1641                           ;main_base.c: 194: TRISA &= ~(1 << 4);
  1642  02ED  30EF               	movlw	239
  1643  02EE  00C1               	movwf	??_initPWM4
  1644  02EF  0841               	movf	??_initPWM4,w
  1645  02F0  0021               	movlb	1	; select bank1
  1646  02F1  058C               	andwf	12,f	;volatile
  1647  02F2  0008               	return
  1648  02F3                     __end_of_initPWM4:	
  1649                           
  1650                           	psect	text9
  1651  02F3                     __ptext9:	
  1652 ;; *************** function _initPWM3 *****************
  1653 ;; Defined at:
  1654 ;;		line 158 in file "main_base.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2, status,0, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1668 ;;      Params:         0       0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0
  1670 ;;      Temps:          0       1       0       0       0       0
  1671 ;;      Totals:         0       1       0       0       0       0
  1672 ;;Total ram usage:        1 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    4
  1675 ;; This function calls:
  1676 ;;		_setDutyPWM3
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _initPWM3
  1684  02F3                     _initPWM3:	
  1685                           
  1686                           ;main_base.c: 160: TRISA |= 1 << 3;
  1687                           
  1688                           ;incstack = 0
  1689                           ; Regs used in _initPWM3: [wreg+status,2+status,0+pclath+cstack]
  1690  02F3  0021               	movlb	1	; select bank1
  1691  02F4  158C               	bsf	12,3	;volatile
  1692                           
  1693                           ;main_base.c: 161: CCP3CON = 0b00001100;
  1694  02F5  300C               	movlw	12
  1695  02F6  0026               	movlb	6	; select bank6
  1696  02F7  0093               	movwf	19	;volatile
  1697                           
  1698                           ;main_base.c: 162: setDutyPWM3(0);
  1699  02F8  3000               	movlw	0
  1700  02F9  0020               	movlb	0	; select bank0
  1701  02FA  00BD               	movwf	setDutyPWM3@duty
  1702  02FB  00BE               	movwf	setDutyPWM3@duty+1
  1703  02FC  3181  213A  3182   	fcall	_setDutyPWM3
  1704                           
  1705                           ;main_base.c: 163: CCPTMRS |= 0x02 << 4;
  1706  02FF  0025               	movlb	5	; select bank5
  1707  0300  169E               	bsf	30,5	;volatile
  1708                           
  1709                           ;main_base.c: 164: TMR6IF = 0;
  1710  0301  0020               	movlb	0	; select bank0
  1711  0302  1193               	bcf	19,3	;volatile
  1712  0303                     l277:	
  1713                           ;main_base.c: 165: while(!TMR6IF);
  1714                           
  1715  0303  1D93               	btfss	19,3	;volatile
  1716  0304  2B03               	goto	l277
  1717                           
  1718                           ;main_base.c: 166: TRISA &= ~(1 << 3);
  1719  0305  30F7               	movlw	247
  1720  0306  00C1               	movwf	??_initPWM3
  1721  0307  0841               	movf	??_initPWM3,w
  1722  0308  0021               	movlb	1	; select bank1
  1723  0309  058C               	andwf	12,f	;volatile
  1724  030A  0008               	return
  1725  030B                     __end_of_initPWM3:	
  1726                           
  1727                           	psect	text10
  1728  013A                     __ptext10:	
  1729 ;; *************** function _setDutyPWM3 *****************
  1730 ;; Defined at:
  1731 ;;		line 141 in file "main_base.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  duty            2    0[BANK0 ] unsigned int 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1745 ;;      Params:         0       2       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0
  1747 ;;      Temps:          0       2       0       0       0       0
  1748 ;;      Totals:         0       4       0       0       0       0
  1749 ;;Total ram usage:        4 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    3
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_initPWM3
  1756 ;;		_initPWM4
  1757 ;;		_main
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           
  1762                           ;psect for function _setDutyPWM3
  1763  013A                     _setDutyPWM3:	
  1764                           
  1765                           ;main_base.c: 143: if (duty < 36)
  1766                           
  1767                           ;incstack = 0
  1768                           ; Regs used in _setDutyPWM3: [wreg+status,2+status,0]
  1769  013A  3000               	movlw	0
  1770  013B  0020               	movlb	0	; select bank0
  1771  013C  023E               	subwf	setDutyPWM3@duty+1,w
  1772  013D  3024               	movlw	36
  1773  013E  1903               	skipnz
  1774  013F  023D               	subwf	setDutyPWM3@duty,w
  1775  0140  1803               	skipnc
  1776  0141  2944               	goto	l1434
  1777                           
  1778                           ;main_base.c: 144: duty = 36;
  1779  0142  3024               	movlw	36
  1780  0143  294C               	goto	L2
  1781  0144                     l1434:	
  1782                           
  1783                           ;main_base.c: 145: else if (duty > 157)
  1784  0144  3000               	movlw	0
  1785  0145  023E               	subwf	setDutyPWM3@duty+1,w
  1786  0146  309E               	movlw	158
  1787  0147  1903               	skipnz
  1788  0148  023D               	subwf	setDutyPWM3@duty,w
  1789  0149  1C03               	skipc
  1790  014A  294F               	goto	l1438
  1791                           
  1792                           ;main_base.c: 146: duty = 157;
  1793  014B  309D               	movlw	157
  1794  014C                     L2:	
  1795  014C  00BD               	movwf	setDutyPWM3@duty
  1796  014D  3000               	movlw	0
  1797  014E  00BE               	movwf	setDutyPWM3@duty+1
  1798  014F                     l1438:	
  1799                           
  1800                           ;main_base.c: 152: CCP3CON &= ~0b00110000;
  1801  014F  30CF               	movlw	207
  1802  0150  00BF               	movwf	??_setDutyPWM3
  1803  0151  083F               	movf	??_setDutyPWM3,w
  1804  0152  0026               	movlb	6	; select bank6
  1805  0153  0593               	andwf	19,f	;volatile
  1806                           
  1807                           ;main_base.c: 153: CCP3CON |= (duty & 0x02) << 4 ;
  1808  0154  0020               	movlb	0	; select bank0
  1809  0155  083D               	movf	setDutyPWM3@duty,w
  1810  0156  3902               	andlw	2
  1811  0157  00BF               	movwf	??_setDutyPWM3
  1812  0158  3003               	movlw	3
  1813  0159                     u1055:	
  1814  0159  35BF               	lslf	??_setDutyPWM3,f
  1815  015A  3EFF               	addlw	-1
  1816  015B  1D03               	skipz
  1817  015C  2959               	goto	u1055
  1818  015D  353F               	lslf	??_setDutyPWM3,w
  1819  015E  00C0               	movwf	??_setDutyPWM3+1
  1820  015F  0840               	movf	??_setDutyPWM3+1,w
  1821  0160  0026               	movlb	6	; select bank6
  1822  0161  0493               	iorwf	19,f	;volatile
  1823                           
  1824                           ;main_base.c: 154: CCPR3L = (uint8_t) (duty >> 2);
  1825  0162  0020               	movlb	0	; select bank0
  1826  0163  083E               	movf	setDutyPWM3@duty+1,w
  1827  0164  00C0               	movwf	??_setDutyPWM3+1
  1828  0165  083D               	movf	setDutyPWM3@duty,w
  1829  0166  00BF               	movwf	??_setDutyPWM3
  1830  0167  36C0               	lsrf	??_setDutyPWM3+1,f
  1831  0168  0CBF               	rrf	??_setDutyPWM3,f
  1832  0169  36C0               	lsrf	??_setDutyPWM3+1,f
  1833  016A  0CBF               	rrf	??_setDutyPWM3,f
  1834  016B  083F               	movf	??_setDutyPWM3,w
  1835  016C  0026               	movlb	6	; select bank6
  1836  016D  0091               	movwf	17	;volatile
  1837  016E  0008               	return
  1838  016F                     __end_of_setDutyPWM3:	
  1839                           
  1840                           	psect	text11
  1841  02C1                     __ptext11:	
  1842 ;; *************** function _initPWM2 *****************
  1843 ;; Defined at:
  1844 ;;		line 129 in file "main_base.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1858 ;;      Params:         0       0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0
  1860 ;;      Temps:          0       1       0       0       0       0
  1861 ;;      Totals:         0       1       0       0       0       0
  1862 ;;Total ram usage:        1 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    4
  1865 ;; This function calls:
  1866 ;;		_setDutyPWM2
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           
  1873                           ;psect for function _initPWM2
  1874  02C1                     _initPWM2:	
  1875                           
  1876                           ;main_base.c: 131: CCP2SEL = 1;
  1877                           
  1878                           ;incstack = 0
  1879                           ; Regs used in _initPWM2: [wreg+status,2+status,0+pclath+cstack]
  1880  02C1  0022               	movlb	2	; select bank2
  1881  02C2  159D               	bsf	29,3	;volatile
  1882                           
  1883                           ;main_base.c: 132: TRISA |= 1 << 7;
  1884  02C3  0021               	movlb	1	; select bank1
  1885  02C4  178C               	bsf	12,7	;volatile
  1886                           
  1887                           ;main_base.c: 133: CCP2CON = 0b00001100;
  1888  02C5  300C               	movlw	12
  1889  02C6  0025               	movlb	5	; select bank5
  1890  02C7  009A               	movwf	26	;volatile
  1891                           
  1892                           ;main_base.c: 134: setDutyPWM2(0);
  1893  02C8  3000               	movlw	0
  1894  02C9  0020               	movlb	0	; select bank0
  1895  02CA  00BD               	movwf	setDutyPWM2@duty
  1896  02CB  00BE               	movwf	setDutyPWM2@duty+1
  1897  02CC  3181  216F  3182   	fcall	_setDutyPWM2
  1898                           
  1899                           ;main_base.c: 135: CCPTMRS |= 0x02 << 2;
  1900  02CF  0025               	movlb	5	; select bank5
  1901  02D0  159E               	bsf	30,3	;volatile
  1902                           
  1903                           ;main_base.c: 136: TMR6IF = 0;
  1904  02D1  0020               	movlb	0	; select bank0
  1905  02D2  1193               	bcf	19,3	;volatile
  1906  02D3                     l265:	
  1907                           ;main_base.c: 137: while(!TMR6IF);
  1908                           
  1909  02D3  1D93               	btfss	19,3	;volatile
  1910  02D4  2AD3               	goto	l265
  1911                           
  1912                           ;main_base.c: 138: TRISA &= ~(1 << 7);
  1913  02D5  307F               	movlw	127
  1914  02D6  00C1               	movwf	??_initPWM2
  1915  02D7  0841               	movf	??_initPWM2,w
  1916  02D8  0021               	movlb	1	; select bank1
  1917  02D9  058C               	andwf	12,f	;volatile
  1918  02DA  0008               	return
  1919  02DB                     __end_of_initPWM2:	
  1920                           
  1921                           	psect	text12
  1922  016F                     __ptext12:	
  1923 ;; *************** function _setDutyPWM2 *****************
  1924 ;; Defined at:
  1925 ;;		line 112 in file "main_base.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  duty            2    0[BANK0 ] unsigned int 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;		None
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1939 ;;      Params:         0       2       0       0       0       0
  1940 ;;      Locals:         0       0       0       0       0       0
  1941 ;;      Temps:          0       2       0       0       0       0
  1942 ;;      Totals:         0       4       0       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    3
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_initPWM2
  1950 ;;		_main
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           
  1955                           ;psect for function _setDutyPWM2
  1956  016F                     _setDutyPWM2:	
  1957                           
  1958                           ;main_base.c: 114: if (duty < 36)
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _setDutyPWM2: [wreg+status,2+status,0]
  1962  016F  3000               	movlw	0
  1963  0170  0020               	movlb	0	; select bank0
  1964  0171  023E               	subwf	setDutyPWM2@duty+1,w
  1965  0172  3024               	movlw	36
  1966  0173  1903               	skipnz
  1967  0174  023D               	subwf	setDutyPWM2@duty,w
  1968  0175  1803               	skipnc
  1969  0176  2979               	goto	l1420
  1970                           
  1971                           ;main_base.c: 115: duty = 36;
  1972  0177  3024               	movlw	36
  1973  0178  2981               	goto	L3
  1974  0179                     l1420:	
  1975                           
  1976                           ;main_base.c: 116: else if (duty > 157)
  1977  0179  3000               	movlw	0
  1978  017A  023E               	subwf	setDutyPWM2@duty+1,w
  1979  017B  309E               	movlw	158
  1980  017C  1903               	skipnz
  1981  017D  023D               	subwf	setDutyPWM2@duty,w
  1982  017E  1C03               	skipc
  1983  017F  2984               	goto	l1424
  1984                           
  1985                           ;main_base.c: 117: duty = 157;
  1986  0180  309D               	movlw	157
  1987  0181                     L3:	
  1988  0181  00BD               	movwf	setDutyPWM2@duty
  1989  0182  3000               	movlw	0
  1990  0183  00BE               	movwf	setDutyPWM2@duty+1
  1991  0184                     l1424:	
  1992                           
  1993                           ;main_base.c: 123: CCP2CON &= ~0b00110000;
  1994  0184  30CF               	movlw	207
  1995  0185  00BF               	movwf	??_setDutyPWM2
  1996  0186  083F               	movf	??_setDutyPWM2,w
  1997  0187  0025               	movlb	5	; select bank5
  1998  0188  059A               	andwf	26,f	;volatile
  1999                           
  2000                           ;main_base.c: 124: CCP2CON |= (duty & 0x02) << 4 ;
  2001  0189  0020               	movlb	0	; select bank0
  2002  018A  083D               	movf	setDutyPWM2@duty,w
  2003  018B  3902               	andlw	2
  2004  018C  00BF               	movwf	??_setDutyPWM2
  2005  018D  3003               	movlw	3
  2006  018E                     u1025:	
  2007  018E  35BF               	lslf	??_setDutyPWM2,f
  2008  018F  3EFF               	addlw	-1
  2009  0190  1D03               	skipz
  2010  0191  298E               	goto	u1025
  2011  0192  353F               	lslf	??_setDutyPWM2,w
  2012  0193  00C0               	movwf	??_setDutyPWM2+1
  2013  0194  0840               	movf	??_setDutyPWM2+1,w
  2014  0195  0025               	movlb	5	; select bank5
  2015  0196  049A               	iorwf	26,f	;volatile
  2016                           
  2017                           ;main_base.c: 125: CCPR2L = (uint8_t) (duty >> 2);
  2018  0197  0020               	movlb	0	; select bank0
  2019  0198  083E               	movf	setDutyPWM2@duty+1,w
  2020  0199  00C0               	movwf	??_setDutyPWM2+1
  2021  019A  083D               	movf	setDutyPWM2@duty,w
  2022  019B  00BF               	movwf	??_setDutyPWM2
  2023  019C  36C0               	lsrf	??_setDutyPWM2+1,f
  2024  019D  0CBF               	rrf	??_setDutyPWM2,f
  2025  019E  36C0               	lsrf	??_setDutyPWM2+1,f
  2026  019F  0CBF               	rrf	??_setDutyPWM2,f
  2027  01A0  083F               	movf	??_setDutyPWM2,w
  2028  01A1  0025               	movlb	5	; select bank5
  2029  01A2  0098               	movwf	24	;volatile
  2030  01A3  0008               	return
  2031  01A4                     __end_of_setDutyPWM2:	
  2032                           
  2033                           	psect	text13
  2034  030B                     __ptext13:	
  2035 ;; *************** function _initPWM1 *****************
  2036 ;; Defined at:
  2037 ;;		line 101 in file "main_base.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;		None
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;		None
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, status,2, status,0, pclath, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2051 ;;      Params:         0       0       0       0       0       0
  2052 ;;      Locals:         0       0       0       0       0       0
  2053 ;;      Temps:          0       1       0       0       0       0
  2054 ;;      Totals:         0       1       0       0       0       0
  2055 ;;Total ram usage:        1 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    4
  2058 ;; This function calls:
  2059 ;;		_setDutyPWM1
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function _initPWM1
  2067  030B                     _initPWM1:	
  2068                           
  2069                           ;main_base.c: 103: TRISB |= 1 << 3;
  2070                           
  2071                           ;incstack = 0
  2072                           ; Regs used in _initPWM1: [wreg+status,2+status,0+pclath+cstack]
  2073  030B  0021               	movlb	1	; select bank1
  2074  030C  158D               	bsf	13,3	;volatile
  2075                           
  2076                           ;main_base.c: 104: CCP1CON = 0b00001100;
  2077  030D  300C               	movlw	12
  2078  030E  0025               	movlb	5	; select bank5
  2079  030F  0093               	movwf	19	;volatile
  2080                           
  2081                           ;main_base.c: 105: setDutyPWM1(0);
  2082  0310  3000               	movlw	0
  2083  0311  0020               	movlb	0	; select bank0
  2084  0312  00BD               	movwf	setDutyPWM1@duty
  2085  0313  00BE               	movwf	setDutyPWM1@duty+1
  2086  0314  3181  21A4  3183   	fcall	_setDutyPWM1
  2087                           
  2088                           ;main_base.c: 106: CCPTMRS |= 0x02 << 0;
  2089  0317  0025               	movlb	5	; select bank5
  2090  0318  149E               	bsf	30,1	;volatile
  2091                           
  2092                           ;main_base.c: 107: TMR6IF = 0;
  2093  0319  0020               	movlb	0	; select bank0
  2094  031A  1193               	bcf	19,3	;volatile
  2095  031B                     l253:	
  2096                           ;main_base.c: 108: while(!TMR6IF);
  2097                           
  2098  031B  1D93               	btfss	19,3	;volatile
  2099  031C  2B1B               	goto	l253
  2100                           
  2101                           ;main_base.c: 109: TRISB &= ~(1 << 3);
  2102  031D  30F7               	movlw	247
  2103  031E  00C1               	movwf	??_initPWM1
  2104  031F  0841               	movf	??_initPWM1,w
  2105  0320  0021               	movlb	1	; select bank1
  2106  0321  058D               	andwf	13,f	;volatile
  2107  0322  0008               	return
  2108  0323                     __end_of_initPWM1:	
  2109                           
  2110                           	psect	text14
  2111  01A4                     __ptext14:	
  2112 ;; *************** function _setDutyPWM1 *****************
  2113 ;; Defined at:
  2114 ;;		line 84 in file "main_base.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  duty            2    0[BANK0 ] unsigned int 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2128 ;;      Params:         0       2       0       0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0
  2130 ;;      Temps:          0       2       0       0       0       0
  2131 ;;      Totals:         0       4       0       0       0       0
  2132 ;;Total ram usage:        4 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    3
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_initPWM1
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _setDutyPWM1
  2145  01A4                     _setDutyPWM1:	
  2146                           
  2147                           ;main_base.c: 86: if (duty < 36)
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _setDutyPWM1: [wreg+status,2+status,0]
  2151  01A4  3000               	movlw	0
  2152  01A5  0020               	movlb	0	; select bank0
  2153  01A6  023E               	subwf	setDutyPWM1@duty+1,w
  2154  01A7  3024               	movlw	36
  2155  01A8  1903               	skipnz
  2156  01A9  023D               	subwf	setDutyPWM1@duty,w
  2157  01AA  1803               	skipnc
  2158  01AB  29AE               	goto	l1406
  2159                           
  2160                           ;main_base.c: 87: duty = 36;
  2161  01AC  3024               	movlw	36
  2162  01AD  29B6               	goto	L4
  2163  01AE                     l1406:	
  2164                           
  2165                           ;main_base.c: 88: else if (duty > 157)
  2166  01AE  3000               	movlw	0
  2167  01AF  023E               	subwf	setDutyPWM1@duty+1,w
  2168  01B0  309E               	movlw	158
  2169  01B1  1903               	skipnz
  2170  01B2  023D               	subwf	setDutyPWM1@duty,w
  2171  01B3  1C03               	skipc
  2172  01B4  29B9               	goto	l1410
  2173                           
  2174                           ;main_base.c: 89: duty = 157;
  2175  01B5  309D               	movlw	157
  2176  01B6                     L4:	
  2177  01B6  00BD               	movwf	setDutyPWM1@duty
  2178  01B7  3000               	movlw	0
  2179  01B8  00BE               	movwf	setDutyPWM1@duty+1
  2180  01B9                     l1410:	
  2181                           
  2182                           ;main_base.c: 95: CCP1CON &= ~0b00110000;
  2183  01B9  30CF               	movlw	207
  2184  01BA  00BF               	movwf	??_setDutyPWM1
  2185  01BB  083F               	movf	??_setDutyPWM1,w
  2186  01BC  0025               	movlb	5	; select bank5
  2187  01BD  0593               	andwf	19,f	;volatile
  2188                           
  2189                           ;main_base.c: 96: CCP1CON |= (duty & 0x02) << 4 ;
  2190  01BE  0020               	movlb	0	; select bank0
  2191  01BF  083D               	movf	setDutyPWM1@duty,w
  2192  01C0  3902               	andlw	2
  2193  01C1  00BF               	movwf	??_setDutyPWM1
  2194  01C2  3003               	movlw	3
  2195  01C3                     u995:	
  2196  01C3  35BF               	lslf	??_setDutyPWM1,f
  2197  01C4  3EFF               	addlw	-1
  2198  01C5  1D03               	skipz
  2199  01C6  29C3               	goto	u995
  2200  01C7  353F               	lslf	??_setDutyPWM1,w
  2201  01C8  00C0               	movwf	??_setDutyPWM1+1
  2202  01C9  0840               	movf	??_setDutyPWM1+1,w
  2203  01CA  0025               	movlb	5	; select bank5
  2204  01CB  0493               	iorwf	19,f	;volatile
  2205                           
  2206                           ;main_base.c: 97: CCPR1L = (uint8_t) (duty >> 2);
  2207  01CC  0020               	movlb	0	; select bank0
  2208  01CD  083E               	movf	setDutyPWM1@duty+1,w
  2209  01CE  00C0               	movwf	??_setDutyPWM1+1
  2210  01CF  083D               	movf	setDutyPWM1@duty,w
  2211  01D0  00BF               	movwf	??_setDutyPWM1
  2212  01D1  36C0               	lsrf	??_setDutyPWM1+1,f
  2213  01D2  0CBF               	rrf	??_setDutyPWM1,f
  2214  01D3  36C0               	lsrf	??_setDutyPWM1+1,f
  2215  01D4  0CBF               	rrf	??_setDutyPWM1,f
  2216  01D5  083F               	movf	??_setDutyPWM1,w
  2217  01D6  0025               	movlb	5	; select bank5
  2218  01D7  0091               	movwf	17	;volatile
  2219  01D8  0008               	return
  2220  01D9                     __end_of_setDutyPWM1:	
  2221                           
  2222                           	psect	text15
  2223  03AC                     __ptext15:	
  2224 ;; *************** function _initInt *****************
  2225 ;; Defined at:
  2226 ;;		line 197 in file "main_base.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		None
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2240 ;;      Params:         0       0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0
  2243 ;;      Totals:         0       0       0       0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    3
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _initInt
  2256  03AC                     _initInt:	
  2257                           
  2258                           ;main_base.c: 198: RCIE = 1;
  2259                           
  2260                           ;incstack = 0
  2261                           ; Regs used in _initInt: []
  2262  03AC  0021               	movlb	1	; select bank1
  2263  03AD  1691               	bsf	17,5	;volatile
  2264                           
  2265                           ;main_base.c: 200: PEIE = 1;
  2266  03AE  170B               	bsf	11,6	;volatile
  2267                           
  2268                           ;main_base.c: 201: GIE = 1;
  2269  03AF  178B               	bsf	11,7	;volatile
  2270  03B0  0008               	return
  2271  03B1                     __end_of_initInt:	
  2272                           
  2273                           	psect	text16
  2274  039F                     __ptext16:	
  2275 ;; *************** function _initFrequency *****************
  2276 ;; Defined at:
  2277 ;;		line 17 in file "main_base.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		status,2
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2291 ;;      Params:         0       0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0
  2294 ;;      Totals:         0       0       0       0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    3
  2298 ;; This function calls:
  2299 ;;		Nothing
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           
  2306                           ;psect for function _initFrequency
  2307  039F                     _initFrequency:	
  2308                           
  2309                           ;main_base.c: 27: IRCF0 = 1;
  2310                           
  2311                           ;incstack = 0
  2312                           ; Regs used in _initFrequency: [status,2]
  2313  039F  0021               	movlb	1	; select bank1
  2314  03A0  1599               	bsf	25,3	;volatile
  2315                           
  2316                           ;main_base.c: 28: IRCF1 = 0;
  2317  03A1  1219               	bcf	25,4	;volatile
  2318                           
  2319                           ;main_base.c: 29: IRCF2 = 1;
  2320  03A2  1699               	bsf	25,5	;volatile
  2321                           
  2322                           ;main_base.c: 30: IRCF3 = 1;
  2323  03A3  1719               	bsf	25,6	;volatile
  2324                           
  2325                           ;main_base.c: 32: OSCTUNE = 0b00000000;
  2326  03A4  0198               	clrf	24	;volatile
  2327  03A5  0008               	return
  2328  03A6                     __end_of_initFrequency:	
  2329                           
  2330                           	psect	intentry
  2331  0004                     __pintentry:	
  2332 ;; *************** function _ISR *****************
  2333 ;; Defined at:
  2334 ;;		line 52 in file "main_v_1_0.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2348 ;;      Params:         0       0       0       0       0       0
  2349 ;;      Locals:         0       0       0       0       0       0
  2350 ;;      Temps:          4       0       0       0       0       0
  2351 ;;      Totals:         4       0       0       0       0       0
  2352 ;;Total ram usage:        4 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    2
  2355 ;; This function calls:
  2356 ;;		_getData
  2357 ;;		_getPicAddr
  2358 ;;		_getSAddr
  2359 ;;		_setServo
  2360 ;; This function is called by:
  2361 ;;		Interrupt level 1
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365  0004                     _ISR:	
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2369  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2370  0005  3180               	pagesel	$
  2371  0006  0020               	movlb	0	; select bank0
  2372  0007  087F               	movf	127,w
  2373  0008  00FC               	movwf	??_ISR+3
  2374                           
  2375                           ;main_v_1_0.c: 58: if (RCIE && RCIF) {
  2376  0009  0021               	movlb	1	; select bank1
  2377  000A  1E91               	btfss	17,5	;volatile
  2378  000B  2863               	goto	i1l390
  2379  000C  0020               	movlb	0	; select bank0
  2380  000D  1E91               	btfss	17,5	;volatile
  2381  000E  2863               	goto	i1l390
  2382                           
  2383                           ;main_v_1_0.c: 59: if (dat0 == -1) {
  2384  000F  0A48               	incf	_dat0,w
  2385  0010  1D03               	skipz
  2386  0011  2833               	goto	i1l1644
  2387  0012  0A49               	incf	_dat0+1,w
  2388  0013  1D03               	btfss	3,2
  2389  0014  2833               	goto	i1l1644
  2390                           
  2391                           ;main_v_1_0.c: 60: dat0 = RCREG;
  2392  0015  0023               	movlb	3	; select bank3
  2393  0016  0819               	movf	25,w	;volatile
  2394  0017  00F9               	movwf	??_ISR
  2395  0018  01FA               	clrf	??_ISR+1
  2396  0019  0879               	movf	??_ISR,w
  2397  001A  0020               	movlb	0	; select bank0
  2398  001B  00C8               	movwf	_dat0
  2399  001C  087A               	movf	??_ISR+1,w
  2400  001D  00C9               	movwf	_dat0+1
  2401                           
  2402                           ;main_v_1_0.c: 61: if (!(dat0 & 0b10000000)) {
  2403  001E  1BC8               	btfsc	_dat0,7
  2404  001F  2822               	goto	i1l1640
  2405                           
  2406                           ;main_v_1_0.c: 62: dat0 = -1;
  2407  0020  30FF               	movlw	255
  2408  0021  282F               	goto	L5
  2409  0022                     i1l1640:	
  2410                           ;main_v_1_0.c: 63: } else if (getPicAddr((uint8_t) (dat0 & 0xff), (uint8_t) (dat1 & 0xff
      +                          )) != 1) {
  2411                           
  2412  0022  084A               	movf	_dat1,w
  2413  0023  00F9               	movwf	??_ISR
  2414  0024  0879               	movf	??_ISR,w
  2415  0025  00F0               	movwf	getPicAddr@d1
  2416  0026  0848               	movf	_dat0,w
  2417  0027  3183  238E  3180   	fcall	_getPicAddr
  2418  002A  3A01               	xorlw	1
  2419  002B  1903               	skipnz
  2420  002C  2861               	goto	i1l1652
  2421                           
  2422                           ;main_v_1_0.c: 64: dat0 = -1;
  2423  002D  30FF               	movlw	255
  2424  002E  0020               	movlb	0	; select bank0
  2425  002F                     L5:	
  2426  002F  00C8               	movwf	_dat0
  2427  0030  30FF               	movlw	255
  2428  0031  00C9               	movwf	_dat0+1
  2429                           
  2430                           ;main_v_1_0.c: 65: }
  2431                           ;main_v_1_0.c: 66: } else if (dat1 == -1){
  2432  0032  2861               	goto	i1l1652
  2433  0033                     i1l1644:	
  2434  0033  0A4A               	incf	_dat1,w
  2435  0034  1D03               	skipz
  2436  0035  2861               	goto	i1l1652
  2437  0036  0A4B               	incf	_dat1+1,w
  2438  0037  1D03               	btfss	3,2
  2439  0038  2861               	goto	i1l1652
  2440                           
  2441                           ;main_v_1_0.c: 67: dat1 = RCREG;
  2442  0039  0023               	movlb	3	; select bank3
  2443  003A  0819               	movf	25,w	;volatile
  2444  003B  00F9               	movwf	??_ISR
  2445  003C  01FA               	clrf	??_ISR+1
  2446  003D  0879               	movf	??_ISR,w
  2447  003E  0020               	movlb	0	; select bank0
  2448  003F  00CA               	movwf	_dat1
  2449  0040  087A               	movf	??_ISR+1,w
  2450  0041  00CB               	movwf	_dat1+1
  2451                           
  2452                           ;main_v_1_0.c: 68: setServo(getSAddr((uint8_t) (dat0 & 0xff), (uint8_t) (dat1 & 0xff)), 
      +                          getData((uint8_t) (dat0 & 0xff), (uint8_t) (dat1 & 0xff)));
  2453  0042  084A               	movf	_dat1,w
  2454  0043  00F9               	movwf	??_ISR
  2455  0044  0879               	movf	??_ISR,w
  2456  0045  00F0               	movwf	getData@d1
  2457  0046  0848               	movf	_dat0,w
  2458  0047  3183  2339  3180   	fcall	_getData
  2459  004A  00FA               	movwf	??_ISR+1
  2460  004B  087A               	movf	??_ISR+1,w
  2461  004C  00F5               	movwf	setServo@val
  2462  004D  0020               	movlb	0	; select bank0
  2463  004E  084A               	movf	_dat1,w
  2464  004F  00FB               	movwf	??_ISR+2
  2465  0050  087B               	movf	??_ISR+2,w
  2466  0051  00F0               	movwf	getSAddr@d1
  2467  0052  0848               	movf	_dat0,w
  2468  0053  3183  2384  3180   	fcall	_getSAddr
  2469  0056  3180  20CC         	fcall	_setServo
  2470                           
  2471                           ;main_v_1_0.c: 69: dat0 = dat1 = -1;
  2472  0058  30FF               	movlw	255
  2473  0059  0020               	movlb	0	; select bank0
  2474  005A  00CA               	movwf	_dat1
  2475  005B  30FF               	movlw	255
  2476  005C  00CB               	movwf	_dat1+1
  2477  005D  084B               	movf	_dat1+1,w
  2478  005E  00C9               	movwf	_dat0+1
  2479  005F  084A               	movf	_dat1,w
  2480  0060  00C8               	movwf	_dat0
  2481  0061                     i1l1652:	
  2482                           
  2483                           ;main_v_1_0.c: 70: }
  2484                           ;main_v_1_0.c: 71: RCIF = 0;
  2485  0061  0020               	movlb	0	; select bank0
  2486  0062  1291               	bcf	17,5	;volatile
  2487  0063                     i1l390:	
  2488  0063  087C               	movf	??_ISR+3,w
  2489  0064  0020               	movlb	0	; select bank0
  2490  0065  00FF               	movwf	127
  2491  0066  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2492  0067  0009               	retfie
  2493  0068                     __end_of_ISR:	
  2494                           
  2495                           	psect	text18
  2496  00CC                     __ptext18:	
  2497 ;; *************** function _setServo *****************
  2498 ;; Defined at:
  2499 ;;		line 35 in file "main_v_1_0.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  id              1    wreg     unsigned char 
  2502 ;;  val             1    5[COMMON] unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  id              1    8[COMMON] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2514 ;;      Params:         1       0       0       0       0       0
  2515 ;;      Locals:         1       0       0       0       0       0
  2516 ;;      Temps:          2       0       0       0       0       0
  2517 ;;      Totals:         4       0       0       0       0       0
  2518 ;;Total ram usage:        4 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    1
  2521 ;; This function calls:
  2522 ;;		i1_setDutyPWM1
  2523 ;;		i1_setDutyPWM2
  2524 ;;		i1_setDutyPWM3
  2525 ;;		i1_setDutyPWM4
  2526 ;; This function is called by:
  2527 ;;		_ISR
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           
  2532                           ;psect for function _setServo
  2533  00CC                     _setServo:	
  2534                           
  2535                           ;incstack = 0
  2536                           ; Regs used in _setServo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2537                           ;setServo@id stored from wreg
  2538  00CC  00F8               	movwf	setServo@id
  2539                           
  2540                           ;main_v_1_0.c: 36: switch (id) {
  2541  00CD  28F6               	goto	i1l1626
  2542  00CE                     i1l1616:	
  2543                           ;main_v_1_0.c: 37: case 0:
  2544                           
  2545                           
  2546                           ;main_v_1_0.c: 38: setDutyPWM1(val);
  2547  00CE  0875               	movf	setServo@val,w
  2548  00CF  00F6               	movwf	??_setServo
  2549  00D0  01F7               	clrf	??_setServo+1
  2550  00D1  0876               	movf	??_setServo,w
  2551  00D2  00F0               	movwf	i1setDutyPWM1@duty
  2552  00D3  0877               	movf	??_setServo+1,w
  2553  00D4  00F1               	movwf	i1setDutyPWM1@duty+1
  2554  00D5  3182  2269         	fcall	i1_setDutyPWM1
  2555                           
  2556                           ;main_v_1_0.c: 39: break;
  2557  00D7  0008               	return
  2558  00D8                     i1l1618:	
  2559                           ;main_v_1_0.c: 40: case 1:
  2560                           
  2561                           
  2562                           ;main_v_1_0.c: 41: setDutyPWM2(val);
  2563  00D8  0875               	movf	setServo@val,w
  2564  00D9  00F6               	movwf	??_setServo
  2565  00DA  01F7               	clrf	??_setServo+1
  2566  00DB  0876               	movf	??_setServo,w
  2567  00DC  00F0               	movwf	i1setDutyPWM2@duty
  2568  00DD  0877               	movf	??_setServo+1,w
  2569  00DE  00F1               	movwf	i1setDutyPWM2@duty+1
  2570  00DF  3182  2239         	fcall	i1_setDutyPWM2
  2571                           
  2572                           ;main_v_1_0.c: 42: break;
  2573  00E1  0008               	return
  2574  00E2                     i1l1620:	
  2575                           ;main_v_1_0.c: 43: case 2:
  2576                           
  2577                           
  2578                           ;main_v_1_0.c: 44: setDutyPWM3(val);
  2579  00E2  0875               	movf	setServo@val,w
  2580  00E3  00F6               	movwf	??_setServo
  2581  00E4  01F7               	clrf	??_setServo+1
  2582  00E5  0876               	movf	??_setServo,w
  2583  00E6  00F0               	movwf	i1setDutyPWM3@duty
  2584  00E7  0877               	movf	??_setServo+1,w
  2585  00E8  00F1               	movwf	i1setDutyPWM3@duty+1
  2586  00E9  3182  2209         	fcall	i1_setDutyPWM3
  2587                           
  2588                           ;main_v_1_0.c: 45: break;
  2589  00EB  0008               	return
  2590  00EC                     i1l1622:	
  2591                           ;main_v_1_0.c: 46: case 3:
  2592                           
  2593                           
  2594                           ;main_v_1_0.c: 47: setDutyPWM4(val);
  2595  00EC  0875               	movf	setServo@val,w
  2596  00ED  00F6               	movwf	??_setServo
  2597  00EE  01F7               	clrf	??_setServo+1
  2598  00EF  0876               	movf	??_setServo,w
  2599  00F0  00F0               	movwf	i1setDutyPWM4@duty
  2600  00F1  0877               	movf	??_setServo+1,w
  2601  00F2  00F1               	movwf	i1setDutyPWM4@duty+1
  2602  00F3  3181  21D9         	fcall	i1_setDutyPWM4
  2603                           
  2604                           ;main_v_1_0.c: 49: }
  2605                           
  2606                           ;main_v_1_0.c: 48: break;
  2607  00F5  0008               	return
  2608  00F6                     i1l1626:	
  2609  00F6  0878               	movf	setServo@id,w
  2610                           
  2611                           ; Switch size 1, requested type "space"
  2612                           ; Number of cases is 4, Range of values is 0 to 3
  2613                           ; switch strategies available:
  2614                           ; Name         Instructions Cycles
  2615                           ; simple_byte           13     7 (average)
  2616                           ; direct_byte           14     6 (fixed)
  2617                           ; jumptable            260     6 (fixed)
  2618                           ;	Chosen strategy is simple_byte
  2619  00F7  3A00               	xorlw	0	; case 0
  2620  00F8  1903               	skipnz
  2621  00F9  28CE               	goto	i1l1616
  2622  00FA  3A01               	xorlw	1	; case 1
  2623  00FB  1903               	skipnz
  2624  00FC  28D8               	goto	i1l1618
  2625  00FD  3A03               	xorlw	3	; case 2
  2626  00FE  1903               	skipnz
  2627  00FF  28E2               	goto	i1l1620
  2628  0100  3A01               	xorlw	1	; case 3
  2629  0101  1903               	skipnz
  2630  0102  28EC               	goto	i1l1622
  2631  0103  2904               	goto	i1l380
  2632  0104                     i1l380:	
  2633  0104  0008               	return
  2634  0105                     __end_of_setServo:	
  2635                           
  2636                           	psect	text19
  2637  01D9                     __ptext19:	
  2638 ;; *************** function i1_setDutyPWM4 *****************
  2639 ;; Defined at:
  2640 ;;		line 169 in file "main_base.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;  duty            2    0[COMMON] unsigned int 
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2654 ;;      Params:         2       0       0       0       0       0
  2655 ;;      Locals:         0       0       0       0       0       0
  2656 ;;      Temps:          2       0       0       0       0       0
  2657 ;;      Totals:         4       0       0       0       0       0
  2658 ;;Total ram usage:        4 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_setServo
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           
  2668                           ;psect for function i1_setDutyPWM4
  2669  01D9                     i1_setDutyPWM4:	
  2670                           
  2671                           ;main_base.c: 171: if (duty < 36)
  2672                           
  2673                           ;incstack = 0
  2674                           ; Regs used in i1_setDutyPWM4: [wreg+status,2+status,0]
  2675  01D9  3000               	movlw	0
  2676  01DA  0271               	subwf	i1setDutyPWM4@duty+1,w
  2677  01DB  3024               	movlw	36
  2678  01DC  1903               	skipnz
  2679  01DD  0270               	subwf	i1setDutyPWM4@duty,w
  2680  01DE  1803               	skipnc
  2681  01DF  29E2               	goto	i1l1490
  2682                           
  2683                           ;main_base.c: 172: duty = 36;
  2684  01E0  3024               	movlw	36
  2685  01E1  29EA               	goto	L6
  2686  01E2                     i1l1490:	
  2687                           
  2688                           ;main_base.c: 173: else if (duty > 157)
  2689  01E2  3000               	movlw	0
  2690  01E3  0271               	subwf	i1setDutyPWM4@duty+1,w
  2691  01E4  309E               	movlw	158
  2692  01E5  1903               	skipnz
  2693  01E6  0270               	subwf	i1setDutyPWM4@duty,w
  2694  01E7  1C03               	skipc
  2695  01E8  29ED               	goto	i1l1494
  2696                           
  2697                           ;main_base.c: 174: duty = 157;
  2698  01E9  309D               	movlw	157
  2699  01EA                     L6:	
  2700  01EA  00F0               	movwf	i1setDutyPWM4@duty
  2701  01EB  3000               	movlw	0
  2702  01EC  00F1               	movwf	i1setDutyPWM4@duty+1
  2703  01ED                     i1l1494:	
  2704                           
  2705                           ;main_base.c: 180: CCP4CON &= ~0b00110000;
  2706  01ED  30CF               	movlw	207
  2707  01EE  00F2               	movwf	??i1_setDutyPWM4
  2708  01EF  0872               	movf	??i1_setDutyPWM4,w
  2709  01F0  0026               	movlb	6	; select bank6
  2710  01F1  059A               	andwf	26,f	;volatile
  2711                           
  2712                           ;main_base.c: 181: CCP4CON |= (duty & 0x02) << 4 ;
  2713  01F2  0870               	movf	i1setDutyPWM4@duty,w
  2714  01F3  3902               	andlw	2
  2715  01F4  00F2               	movwf	??i1_setDutyPWM4
  2716  01F5  3003               	movlw	3
  2717  01F6                     u117_25:	
  2718  01F6  35F2               	lslf	??i1_setDutyPWM4,f
  2719  01F7  3EFF               	addlw	-1
  2720  01F8  1D03               	skipz
  2721  01F9  29F6               	goto	u117_25
  2722  01FA  3572               	lslf	??i1_setDutyPWM4,w
  2723  01FB  00F3               	movwf	??i1_setDutyPWM4+1
  2724  01FC  0873               	movf	??i1_setDutyPWM4+1,w
  2725  01FD  049A               	iorwf	26,f	;volatile
  2726                           
  2727                           ;main_base.c: 182: CCPR4L = (uint8_t) (duty >> 2);
  2728  01FE  0871               	movf	i1setDutyPWM4@duty+1,w
  2729  01FF  00F3               	movwf	??i1_setDutyPWM4+1
  2730  0200  0870               	movf	i1setDutyPWM4@duty,w
  2731  0201  00F2               	movwf	??i1_setDutyPWM4
  2732  0202  36F3               	lsrf	??i1_setDutyPWM4+1,f
  2733  0203  0CF2               	rrf	??i1_setDutyPWM4,f
  2734  0204  36F3               	lsrf	??i1_setDutyPWM4+1,f
  2735  0205  0CF2               	rrf	??i1_setDutyPWM4,f
  2736  0206  0872               	movf	??i1_setDutyPWM4,w
  2737  0207  0098               	movwf	24	;volatile
  2738  0208  0008               	return
  2739  0209                     __end_ofi1_setDutyPWM4:	
  2740                           
  2741                           	psect	text20
  2742  0209                     __ptext20:	
  2743 ;; *************** function i1_setDutyPWM3 *****************
  2744 ;; Defined at:
  2745 ;;		line 141 in file "main_base.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  duty            2    0[COMMON] unsigned int 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2, status,0
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2759 ;;      Params:         2       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0
  2761 ;;      Temps:          2       0       0       0       0       0
  2762 ;;      Totals:         4       0       0       0       0       0
  2763 ;;Total ram usage:        4 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_setServo
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function i1_setDutyPWM3
  2774  0209                     i1_setDutyPWM3:	
  2775                           
  2776                           ;main_base.c: 143: if (duty < 36)
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in i1_setDutyPWM3: [wreg+status,2+status,0]
  2780  0209  3000               	movlw	0
  2781  020A  0271               	subwf	i1setDutyPWM3@duty+1,w
  2782  020B  3024               	movlw	36
  2783  020C  1903               	skipnz
  2784  020D  0270               	subwf	i1setDutyPWM3@duty,w
  2785  020E  1803               	skipnc
  2786  020F  2A12               	goto	i1l1476
  2787                           
  2788                           ;main_base.c: 144: duty = 36;
  2789  0210  3024               	movlw	36
  2790  0211  2A1A               	goto	L7
  2791  0212                     i1l1476:	
  2792                           
  2793                           ;main_base.c: 145: else if (duty > 157)
  2794  0212  3000               	movlw	0
  2795  0213  0271               	subwf	i1setDutyPWM3@duty+1,w
  2796  0214  309E               	movlw	158
  2797  0215  1903               	skipnz
  2798  0216  0270               	subwf	i1setDutyPWM3@duty,w
  2799  0217  1C03               	skipc
  2800  0218  2A1D               	goto	i1l1480
  2801                           
  2802                           ;main_base.c: 146: duty = 157;
  2803  0219  309D               	movlw	157
  2804  021A                     L7:	
  2805  021A  00F0               	movwf	i1setDutyPWM3@duty
  2806  021B  3000               	movlw	0
  2807  021C  00F1               	movwf	i1setDutyPWM3@duty+1
  2808  021D                     i1l1480:	
  2809                           
  2810                           ;main_base.c: 152: CCP3CON &= ~0b00110000;
  2811  021D  30CF               	movlw	207
  2812  021E  00F2               	movwf	??i1_setDutyPWM3
  2813  021F  0872               	movf	??i1_setDutyPWM3,w
  2814  0220  0026               	movlb	6	; select bank6
  2815  0221  0593               	andwf	19,f	;volatile
  2816                           
  2817                           ;main_base.c: 153: CCP3CON |= (duty & 0x02) << 4 ;
  2818  0222  0870               	movf	i1setDutyPWM3@duty,w
  2819  0223  3902               	andlw	2
  2820  0224  00F2               	movwf	??i1_setDutyPWM3
  2821  0225  3003               	movlw	3
  2822  0226                     u114_25:	
  2823  0226  35F2               	lslf	??i1_setDutyPWM3,f
  2824  0227  3EFF               	addlw	-1
  2825  0228  1D03               	skipz
  2826  0229  2A26               	goto	u114_25
  2827  022A  3572               	lslf	??i1_setDutyPWM3,w
  2828  022B  00F3               	movwf	??i1_setDutyPWM3+1
  2829  022C  0873               	movf	??i1_setDutyPWM3+1,w
  2830  022D  0493               	iorwf	19,f	;volatile
  2831                           
  2832                           ;main_base.c: 154: CCPR3L = (uint8_t) (duty >> 2);
  2833  022E  0871               	movf	i1setDutyPWM3@duty+1,w
  2834  022F  00F3               	movwf	??i1_setDutyPWM3+1
  2835  0230  0870               	movf	i1setDutyPWM3@duty,w
  2836  0231  00F2               	movwf	??i1_setDutyPWM3
  2837  0232  36F3               	lsrf	??i1_setDutyPWM3+1,f
  2838  0233  0CF2               	rrf	??i1_setDutyPWM3,f
  2839  0234  36F3               	lsrf	??i1_setDutyPWM3+1,f
  2840  0235  0CF2               	rrf	??i1_setDutyPWM3,f
  2841  0236  0872               	movf	??i1_setDutyPWM3,w
  2842  0237  0091               	movwf	17	;volatile
  2843  0238  0008               	return
  2844  0239                     __end_ofi1_setDutyPWM3:	
  2845                           
  2846                           	psect	text21
  2847  0239                     __ptext21:	
  2848 ;; *************** function i1_setDutyPWM2 *****************
  2849 ;; Defined at:
  2850 ;;		line 112 in file "main_base.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  duty            2    0[COMMON] unsigned int 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2864 ;;      Params:         2       0       0       0       0       0
  2865 ;;      Locals:         0       0       0       0       0       0
  2866 ;;      Temps:          2       0       0       0       0       0
  2867 ;;      Totals:         4       0       0       0       0       0
  2868 ;;Total ram usage:        4 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_setServo
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           
  2878                           ;psect for function i1_setDutyPWM2
  2879  0239                     i1_setDutyPWM2:	
  2880                           
  2881                           ;main_base.c: 114: if (duty < 36)
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in i1_setDutyPWM2: [wreg+status,2+status,0]
  2885  0239  3000               	movlw	0
  2886  023A  0271               	subwf	i1setDutyPWM2@duty+1,w
  2887  023B  3024               	movlw	36
  2888  023C  1903               	skipnz
  2889  023D  0270               	subwf	i1setDutyPWM2@duty,w
  2890  023E  1803               	skipnc
  2891  023F  2A42               	goto	i1l1462
  2892                           
  2893                           ;main_base.c: 115: duty = 36;
  2894  0240  3024               	movlw	36
  2895  0241  2A4A               	goto	L8
  2896  0242                     i1l1462:	
  2897                           
  2898                           ;main_base.c: 116: else if (duty > 157)
  2899  0242  3000               	movlw	0
  2900  0243  0271               	subwf	i1setDutyPWM2@duty+1,w
  2901  0244  309E               	movlw	158
  2902  0245  1903               	skipnz
  2903  0246  0270               	subwf	i1setDutyPWM2@duty,w
  2904  0247  1C03               	skipc
  2905  0248  2A4D               	goto	i1l1466
  2906                           
  2907                           ;main_base.c: 117: duty = 157;
  2908  0249  309D               	movlw	157
  2909  024A                     L8:	
  2910  024A  00F0               	movwf	i1setDutyPWM2@duty
  2911  024B  3000               	movlw	0
  2912  024C  00F1               	movwf	i1setDutyPWM2@duty+1
  2913  024D                     i1l1466:	
  2914                           
  2915                           ;main_base.c: 123: CCP2CON &= ~0b00110000;
  2916  024D  30CF               	movlw	207
  2917  024E  00F2               	movwf	??i1_setDutyPWM2
  2918  024F  0872               	movf	??i1_setDutyPWM2,w
  2919  0250  0025               	movlb	5	; select bank5
  2920  0251  059A               	andwf	26,f	;volatile
  2921                           
  2922                           ;main_base.c: 124: CCP2CON |= (duty & 0x02) << 4 ;
  2923  0252  0870               	movf	i1setDutyPWM2@duty,w
  2924  0253  3902               	andlw	2
  2925  0254  00F2               	movwf	??i1_setDutyPWM2
  2926  0255  3003               	movlw	3
  2927  0256                     u111_25:	
  2928  0256  35F2               	lslf	??i1_setDutyPWM2,f
  2929  0257  3EFF               	addlw	-1
  2930  0258  1D03               	skipz
  2931  0259  2A56               	goto	u111_25
  2932  025A  3572               	lslf	??i1_setDutyPWM2,w
  2933  025B  00F3               	movwf	??i1_setDutyPWM2+1
  2934  025C  0873               	movf	??i1_setDutyPWM2+1,w
  2935  025D  049A               	iorwf	26,f	;volatile
  2936                           
  2937                           ;main_base.c: 125: CCPR2L = (uint8_t) (duty >> 2);
  2938  025E  0871               	movf	i1setDutyPWM2@duty+1,w
  2939  025F  00F3               	movwf	??i1_setDutyPWM2+1
  2940  0260  0870               	movf	i1setDutyPWM2@duty,w
  2941  0261  00F2               	movwf	??i1_setDutyPWM2
  2942  0262  36F3               	lsrf	??i1_setDutyPWM2+1,f
  2943  0263  0CF2               	rrf	??i1_setDutyPWM2,f
  2944  0264  36F3               	lsrf	??i1_setDutyPWM2+1,f
  2945  0265  0CF2               	rrf	??i1_setDutyPWM2,f
  2946  0266  0872               	movf	??i1_setDutyPWM2,w
  2947  0267  0098               	movwf	24	;volatile
  2948  0268  0008               	return
  2949  0269                     __end_ofi1_setDutyPWM2:	
  2950                           
  2951                           	psect	text22
  2952  0269                     __ptext22:	
  2953 ;; *************** function i1_setDutyPWM1 *****************
  2954 ;; Defined at:
  2955 ;;		line 84 in file "main_base.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  duty            2    0[COMMON] unsigned int 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, status,2, status,0
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2969 ;;      Params:         2       0       0       0       0       0
  2970 ;;      Locals:         0       0       0       0       0       0
  2971 ;;      Temps:          2       0       0       0       0       0
  2972 ;;      Totals:         4       0       0       0       0       0
  2973 ;;Total ram usage:        4 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_setServo
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function i1_setDutyPWM1
  2984  0269                     i1_setDutyPWM1:	
  2985                           
  2986                           ;main_base.c: 86: if (duty < 36)
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in i1_setDutyPWM1: [wreg+status,2+status,0]
  2990  0269  3000               	movlw	0
  2991  026A  0271               	subwf	i1setDutyPWM1@duty+1,w
  2992  026B  3024               	movlw	36
  2993  026C  1903               	skipnz
  2994  026D  0270               	subwf	i1setDutyPWM1@duty,w
  2995  026E  1803               	skipnc
  2996  026F  2A72               	goto	i1l1448
  2997                           
  2998                           ;main_base.c: 87: duty = 36;
  2999  0270  3024               	movlw	36
  3000  0271  2A7A               	goto	L9
  3001  0272                     i1l1448:	
  3002                           
  3003                           ;main_base.c: 88: else if (duty > 157)
  3004  0272  3000               	movlw	0
  3005  0273  0271               	subwf	i1setDutyPWM1@duty+1,w
  3006  0274  309E               	movlw	158
  3007  0275  1903               	skipnz
  3008  0276  0270               	subwf	i1setDutyPWM1@duty,w
  3009  0277  1C03               	skipc
  3010  0278  2A7D               	goto	i1l1452
  3011                           
  3012                           ;main_base.c: 89: duty = 157;
  3013  0279  309D               	movlw	157
  3014  027A                     L9:	
  3015  027A  00F0               	movwf	i1setDutyPWM1@duty
  3016  027B  3000               	movlw	0
  3017  027C  00F1               	movwf	i1setDutyPWM1@duty+1
  3018  027D                     i1l1452:	
  3019                           
  3020                           ;main_base.c: 95: CCP1CON &= ~0b00110000;
  3021  027D  30CF               	movlw	207
  3022  027E  00F2               	movwf	??i1_setDutyPWM1
  3023  027F  0872               	movf	??i1_setDutyPWM1,w
  3024  0280  0025               	movlb	5	; select bank5
  3025  0281  0593               	andwf	19,f	;volatile
  3026                           
  3027                           ;main_base.c: 96: CCP1CON |= (duty & 0x02) << 4 ;
  3028  0282  0870               	movf	i1setDutyPWM1@duty,w
  3029  0283  3902               	andlw	2
  3030  0284  00F2               	movwf	??i1_setDutyPWM1
  3031  0285  3003               	movlw	3
  3032  0286                     u108_25:	
  3033  0286  35F2               	lslf	??i1_setDutyPWM1,f
  3034  0287  3EFF               	addlw	-1
  3035  0288  1D03               	skipz
  3036  0289  2A86               	goto	u108_25
  3037  028A  3572               	lslf	??i1_setDutyPWM1,w
  3038  028B  00F3               	movwf	??i1_setDutyPWM1+1
  3039  028C  0873               	movf	??i1_setDutyPWM1+1,w
  3040  028D  0493               	iorwf	19,f	;volatile
  3041                           
  3042                           ;main_base.c: 97: CCPR1L = (uint8_t) (duty >> 2);
  3043  028E  0871               	movf	i1setDutyPWM1@duty+1,w
  3044  028F  00F3               	movwf	??i1_setDutyPWM1+1
  3045  0290  0870               	movf	i1setDutyPWM1@duty,w
  3046  0291  00F2               	movwf	??i1_setDutyPWM1
  3047  0292  36F3               	lsrf	??i1_setDutyPWM1+1,f
  3048  0293  0CF2               	rrf	??i1_setDutyPWM1,f
  3049  0294  36F3               	lsrf	??i1_setDutyPWM1+1,f
  3050  0295  0CF2               	rrf	??i1_setDutyPWM1,f
  3051  0296  0872               	movf	??i1_setDutyPWM1,w
  3052  0297  0091               	movwf	17	;volatile
  3053  0298  0008               	return
  3054  0299                     __end_ofi1_setDutyPWM1:	
  3055                           
  3056                           	psect	text23
  3057  0384                     __ptext23:	
  3058 ;; *************** function _getSAddr *****************
  3059 ;; Defined at:
  3060 ;;		line 20 in file "main_v_1_0.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  d0              1    wreg     unsigned char 
  3063 ;;  d1              1    0[COMMON] unsigned char 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  d0              1    2[COMMON] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      unsigned char 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3075 ;;      Params:         1       0       0       0       0       0
  3076 ;;      Locals:         1       0       0       0       0       0
  3077 ;;      Temps:          1       0       0       0       0       0
  3078 ;;      Totals:         3       0       0       0       0       0
  3079 ;;Total ram usage:        3 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; This function calls:
  3082 ;;		Nothing
  3083 ;; This function is called by:
  3084 ;;		_ISR
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _getSAddr
  3090  0384                     _getSAddr:	
  3091                           
  3092                           ;incstack = 0
  3093                           ; Regs used in _getSAddr: [wreg+status,2+status,0]
  3094                           ;getSAddr@d0 stored from wreg
  3095  0384  00F2               	movwf	getSAddr@d0
  3096                           
  3097                           ;main_v_1_0.c: 21: return (d0 >> 3) & 0b00000011;
  3098  0385  0872               	movf	getSAddr@d0,w
  3099  0386  00F1               	movwf	??_getSAddr
  3100  0387  3003               	movlw	3
  3101  0388                     u127_25:	
  3102  0388  36F1               	lsrf	??_getSAddr,f
  3103  0389  0B89               	decfsz	9,f
  3104  038A  2B88               	goto	u127_25
  3105  038B  0871               	movf	??_getSAddr,w
  3106  038C  3903               	andlw	3
  3107  038D  0008               	return
  3108  038E                     __end_of_getSAddr:	
  3109                           
  3110                           	psect	text24
  3111  038E                     __ptext24:	
  3112 ;; *************** function _getPicAddr *****************
  3113 ;; Defined at:
  3114 ;;		line 16 in file "main_v_1_0.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  d0              1    wreg     unsigned char 
  3117 ;;  d1              1    0[COMMON] unsigned char 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  d0              1    2[COMMON] unsigned char 
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      unsigned char 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3129 ;;      Params:         1       0       0       0       0       0
  3130 ;;      Locals:         1       0       0       0       0       0
  3131 ;;      Temps:          1       0       0       0       0       0
  3132 ;;      Totals:         3       0       0       0       0       0
  3133 ;;Total ram usage:        3 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; This function calls:
  3136 ;;		Nothing
  3137 ;; This function is called by:
  3138 ;;		_ISR
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           
  3143                           ;psect for function _getPicAddr
  3144  038E                     _getPicAddr:	
  3145                           
  3146                           ;incstack = 0
  3147                           ; Regs used in _getPicAddr: [wreg+status,2+status,0]
  3148                           ;getPicAddr@d0 stored from wreg
  3149  038E  00F2               	movwf	getPicAddr@d0
  3150                           
  3151                           ;main_v_1_0.c: 17: return (d0 >> 5) & 0b00000011;
  3152  038F  0872               	movf	getPicAddr@d0,w
  3153  0390  00F1               	movwf	??_getPicAddr
  3154  0391  3005               	movlw	5
  3155  0392                     u126_25:	
  3156  0392  36F1               	lsrf	??_getPicAddr,f
  3157  0393  0B89               	decfsz	9,f
  3158  0394  2B92               	goto	u126_25
  3159  0395  0871               	movf	??_getPicAddr,w
  3160  0396  3903               	andlw	3
  3161  0397  0008               	return
  3162  0398                     __end_of_getPicAddr:	
  3163                           
  3164                           	psect	text25
  3165  0339                     __ptext25:	
  3166 ;; *************** function _getData *****************
  3167 ;; Defined at:
  3168 ;;		line 28 in file "main_v_1_0.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  d0              1    wreg     unsigned char 
  3171 ;;  d1              1    0[COMMON] unsigned char 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  d0              1    3[COMMON] unsigned char 
  3174 ;;  ret             1    4[COMMON] unsigned char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      unsigned char 
  3177 ;; Registers used:
  3178 ;;		wreg, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3184 ;;      Params:         1       0       0       0       0       0
  3185 ;;      Locals:         2       0       0       0       0       0
  3186 ;;      Temps:          2       0       0       0       0       0
  3187 ;;      Totals:         5       0       0       0       0       0
  3188 ;;Total ram usage:        5 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_ISR
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           
  3198                           ;psect for function _getData
  3199  0339                     _getData:	
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in _getData: [wreg+status,2+status,0]
  3203                           ;getData@d0 stored from wreg
  3204  0339  00F3               	movwf	getData@d0
  3205                           
  3206                           ;main_v_1_0.c: 29: uint8_t ret = 0;
  3207  033A  01F4               	clrf	getData@ret
  3208                           
  3209                           ;main_v_1_0.c: 30: ret |= (d0 & 0b00000001) << 7;
  3210  033B  0873               	movf	getData@d0,w
  3211  033C  3901               	andlw	1
  3212  033D  00F1               	movwf	??_getData
  3213  033E  3006               	movlw	6
  3214  033F                     u128_25:	
  3215  033F  35F1               	lslf	??_getData,f
  3216  0340  3EFF               	addlw	-1
  3217  0341  1D03               	skipz
  3218  0342  2B3F               	goto	u128_25
  3219  0343  3571               	lslf	??_getData,w
  3220  0344  00F2               	movwf	??_getData+1
  3221  0345  0872               	movf	??_getData+1,w
  3222  0346  04F4               	iorwf	getData@ret,f
  3223                           
  3224                           ;main_v_1_0.c: 31: ret |= (d1 & 0b01111111);
  3225  0347  0870               	movf	getData@d1,w
  3226  0348  397F               	andlw	127
  3227  0349  00F1               	movwf	??_getData
  3228  034A  0871               	movf	??_getData,w
  3229  034B  04F4               	iorwf	getData@ret,f
  3230                           
  3231                           ;main_v_1_0.c: 32: return ret;
  3232  034C  0874               	movf	getData@ret,w
  3233  034D  0008               	return
  3234  034E                     __end_of_getData:	
  3235  007E                     btemp	set	126	;btemp
  3236  007E                     int$flags	set	126
  3237  007E                     wtemp	set	126
  3238  007E                     wtemp0	set	126
  3239  0080                     wtemp1	set	128
  3240  0082                     wtemp2	set	130
  3241  0084                     wtemp3	set	132
  3242  0086                     wtemp4	set	134
  3243  0088                     wtemp5	set	136
  3244  007F                     wtemp6	set	127
  3245  007E                     ttemp	set	126
  3246  007E                     ttemp0	set	126
  3247  0081                     ttemp1	set	129
  3248  0084                     ttemp2	set	132
  3249  0087                     ttemp3	set	135
  3250  007F                     ttemp4	set	127
  3251  007E                     ltemp	set	126
  3252  007E                     ltemp0	set	126
  3253  0082                     ltemp1	set	130
  3254  0086                     ltemp2	set	134
  3255  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         79
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     11      45
    BANK1            80      0      50
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    uart_rec_buff	PTR struct ringbuffer size(1) Largest target is 50
		 -> uart_rec_buff_(BANK1[50]), NULL(NULL[0]), 

    memset@str	PTR unsigned char  size(1) Largest target is 9
		 -> arg1buff(BANK0[9]), arg0buff(BANK0[9]), cmdbuff(BANK0[9]), 

    sp__ringbufferInit	PTR struct ringbuffer size(1) Largest target is 50
		 -> uart_rec_buff_(BANK1[50]), NULL(NULL[0]), 

    ringbufferInit@rb	PTR struct ringbuffer size(1) Largest target is 50
		 -> uart_rec_buff_(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_setServo
    _setServo->_getData

Critical Paths under _main in BANK0

    _main->_initVariables
    _initVariables->_memset
    _initPWM4->_setDutyPWM3
    _initPWM3->_setDutyPWM3
    _initPWM2->_setDutyPWM2
    _initPWM1->_setDutyPWM1

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    2516
                                              7 BANK0      4     0      4
                      _initFrequency
                            _initInt
                           _initPWM1
                           _initPWM2
                           _initPWM3
                           _initPWM4
                      _initRegisters
                           _initTMR6
                           _initUART
                      _initVariables
                        _setDutyPWM1
                        _setDutyPWM2
                        _setDutyPWM3
                        _setDutyPWM4
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM4                                          4     2      2     170
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        1     1      0     626
                                              6 BANK0      1     1      0
                             _memset
                     _ringbufferInit
 ---------------------------------------------------------------------------------
 (2) _ringbufferInit                                       1     1      0     115
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _memset                                               6     4      2     511
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR6                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRegisters                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM4                                             1     1      0     276
                                              4 BANK0      1     1      0
                        _setDutyPWM3
 ---------------------------------------------------------------------------------
 (1) _initPWM3                                             1     1      0     276
                                              4 BANK0      1     1      0
                        _setDutyPWM3
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM3                                          4     2      2     276
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initPWM2                                             1     1      0     223
                                              4 BANK0      1     1      0
                        _setDutyPWM2
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM2                                          4     2      2     223
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initPWM1                                             1     1      0     223
                                              4 BANK0      1     1      0
                        _setDutyPWM1
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM1                                          4     2      2     223
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initFrequency                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     899
                                              9 COMMON     4     4      0
                            _getData
                         _getPicAddr
                           _getSAddr
                           _setServo
 ---------------------------------------------------------------------------------
 (4) _setServo                                             4     3      1     627
                                              5 COMMON     4     3      1
                            _getData (ARG)
                           _getSAddr (ARG)
                      i1_setDutyPWM1
                      i1_setDutyPWM2
                      i1_setDutyPWM3
                      i1_setDutyPWM4
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM4                                        4     2      2     116
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM3                                        4     2      2     116
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM2                                        4     2      2     116
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM1                                        4     2      2     116
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _getSAddr                                             3     2      1      75
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getPicAddr                                           3     2      1      75
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getData                                              5     4      1     122
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initFrequency
   _initInt
   _initPWM1
     _setDutyPWM1
   _initPWM2
     _setDutyPWM2
   _initPWM3
     _setDutyPWM3
   _initPWM4
     _setDutyPWM3
   _initRegisters
   _initTMR6
   _initUART
   _initVariables
     _memset
     _ringbufferInit
   _setDutyPWM1
   _setDutyPWM2
   _setDutyPWM3
   _setDutyPWM4

 _ISR (ROOT)
   _getData
   _getPicAddr
   _getSAddr
   _setServo
     _getData (ARG)
     _getSAddr (ARG)
     i1_setDutyPWM1 (ARG)
     i1_setDutyPWM2 (ARG)
     i1_setDutyPWM3 (ARG)
     i1_setDutyPWM4 (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      B      2D       6       56.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      6C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Dec  6 15:02:38 2016

            __CFG_CP$OFF 0000                      l253 031B                      l265 02D3  
                    l277 0303                      l289 02EB                      l393 00CB  
                    _GIE 005F             __CFG_CPD$OFF 0000                      _PR6 041D  
                    _ISR 0004                      u995 01C3             __CFG_BORV$LO 0000  
                    wreg 0009             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   l1400 0326                     l1410 01B9                     l1420 0179  
                   l1406 01AE                     l1424 0184                     l1434 0144  
                   l1438 014F                     l1526 036D                     l1388 037A  
                   l1572 010F                     l1576 011A                     _BRGH 0CF2  
                   _CREN 0CEC                     u1025 018E                     u1055 0159  
                   u1245 0124                     _PEIE 005E                     _RCIE 048D  
                   _RCIF 008D                     _SPEN 0CEF                     _TRMT 0CF1  
                   _TXEN 0CF5                     _SYNC 0CF4                     _WPUB 020D  
           __CFG_WRT$OFF 0000                     _dat0 0048                     _dat1 004A  
                   _main 008D                     fsr0h 0005                     fsr1h 0007  
                   fsr0l 0004                     indf0 0000                     indf1 0001  
                   fsr1l 0006                     btemp 007E                     ltemp 007E  
                   start 0068                     ttemp 007E                     wtemp 007E  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_ISR 0079  
          __CFG_PLLEN$ON 0000                    ?_main 0044                    _BRG16 0CFB  
          __CFG_WDTE$OFF 0000                    _T6CON 041E                    _IRCF0 04CB  
                  _IRCF1 04CC                    _IRCF2 04CD                    _IRCF3 04CE  
                  i1l380 0104                    i1l390 0063                    _RCREG 0199  
                  _SPBRG 019B                    _PORTA 000C                    _PORTB 000D  
                  _TRISA 008C                    _TRISB 008D                    _TXREG 019A  
        __end_of_getData 034E           __CFG_FCMEN$OFF 0000          __end_of_initInt 03B1  
         __CFG_BOREN$OFF 0000                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
 __size_of_initFrequency 0007          __initialization 006A             __end_of_main 00CC  
 __size_of_initRegisters 0013                   ??_main 0048             ?_setDutyPWM1 003D  
           ?_setDutyPWM2 003D             ?_setDutyPWM3 003D             ?_setDutyPWM4 003D  
 __size_of_initVariables 0028         ringbufferInit@rb 003D                   _CCPR1L 0291  
                 _CCPR2L 0298                   _CCPR3L 0311                   _CCPR4L 0318  
                 _ANSELA 018C                   _ANSELB 018D        i1setDutyPWM1@duty 0070  
      i1setDutyPWM2@duty 0070        i1setDutyPWM3@duty 0070        i1setDutyPWM4@duty 0070  
                 u111_25 0256                   i1l1452 027D                   i1l1620 00E2  
                 i1l1462 0242                   i1l1622 00EC                   i1l1448 0272  
                 i1l1480 021D                   i1l1616 00CE                   i1l1640 0022  
                 i1l1466 024D                   i1l1490 01E2                   i1l1618 00D8  
                 i1l1626 00F6                   i1l1476 0212                   i1l1652 0061  
                 i1l1644 0033                   i1l1494 01ED                   u114_25 0226  
                 u108_25 0286                   u117_25 01F6                   u126_25 0392  
                 u127_25 0388                   u128_25 033F                   _TMR6IF 009B  
       __end_of_getSAddr 038E           __CFG_PWRTE$OFF 0000                   _nWPUEN 04AF  
       __end_of_initUART 0373         __end_of_initPWM1 0323         __end_of_initPWM2 02DB  
       __end_of_initPWM3 030B         __end_of_initPWM4 02F3         __end_of_initTMR6 039F  
                 _memset 0323                ??_getData 0071                   _status 0020  
          _initFrequency 039F                   _usestr 0021         __end_of_setServo 0105  
              ??_initInt 003D            _initRegisters 034E  __end_of__initialization 0089  
          _initVariables 0299           __pcstackCOMMON 0070             __pidataBANK0 03B1  
         ?_initFrequency 0070  __size_of_ringbufferInit 0011           ?_initRegisters 0070  
             __pbssBANK0 0020               __pbssBANK1 00A0           ?_initVariables 0070  
 __size_ofi1_setDutyPWM1 0030   __size_ofi1_setDutyPWM2 0030   __size_ofi1_setDutyPWM3 0030  
 __size_ofi1_setDutyPWM4 0030               __pmaintext 008D               _getPicAddr 038E  
             __pintentry 0004                  _CCP1CON 0293                  _CCP2CON 029A  
                _CCP3CON 0313                  _CCP4CON 031A                  _CCP2SEL 08EB  
                ?_memset 003D                  _CCPTMRS 029E                ?_getSAddr 0070  
   __size_of_setDutyPWM1 0035     __size_of_setDutyPWM2 0035     __size_of_setDutyPWM3 0035  
   __size_of_setDutyPWM4 0035                  _OSCTUNE 0098                  _RXDTSEL 08EF  
                _TXCKSEL 08F0                ?_initUART 0070                ?_initPWM1 0070  
              ?_initPWM2 0070                ?_initPWM3 0070                ?_initPWM4 0070  
              ?_initTMR6 0070              setServo@val 0075                ?_setServo 0075  
        ??_initFrequency 003D          __CFG_STVREN$OFF 0000          __size_of_memset 0016  
                _getData 0339                  _cmdbuff 0034                  __ptext1 0105  
                __ptext2 0299                  __ptext3 0373                  __ptext4 0323  
                __ptext5 0361                  __ptext6 0398                  __ptext7 034E  
                __ptext8 02DB                  __ptext9 02F3             __size_of_ISR 0064  
                _initInt 03AC            i1_setDutyPWM1 0269            i1_setDutyPWM2 0239  
          i1_setDutyPWM3 0209            i1_setDutyPWM4 01D9          ??_initRegisters 003D  
             ??_getSAddr 0071               getSAddr@d0 0072               getSAddr@d1 0070  
                clrloop0 03A7     end_of_initialization 0089          ??_initVariables 0043  
             getData@ret 0074               ??_initUART 003D               ??_initPWM1 0041  
             ??_initPWM2 0041               ??_initPWM3 0041               ??_initPWM4 0041  
             ??_initTMR6 003D                  memset@i 0042               ??_setServo 0076  
            ?_getPicAddr 0070           ?i1_setDutyPWM1 0070           ?i1_setDutyPWM2 0070  
         ?i1_setDutyPWM3 0070           ?i1_setDutyPWM4 0070         __CFG_FOSC$INTOSC 0000  
         _ringbufferInit 0373           __end_of_memset 0339   __end_of_ringbufferInit 0384  
    start_initialization 006A              __end_of_ISR 0068      __size_of_getPicAddr 000A  
        setDutyPWM1@duty 003D          setDutyPWM2@duty 003D          setDutyPWM3@duty 003D  
        setDutyPWM4@duty 003D              __pdataBANK0 0048                 ??_memset 003F  
        ??i1_setDutyPWM1 0072          ??i1_setDutyPWM2 0072          ??i1_setDutyPWM3 0072  
        ??i1_setDutyPWM4 0072          ?_ringbufferInit 0070                ___latbits 0001  
          __pcstackBANK0 003D        __size_of_getSAddr 000A        __size_of_initUART 0012  
      __size_of_initPWM1 0018        __size_of_initPWM2 001A        __size_of_initPWM3 0018  
      __size_of_initPWM4 0018        __size_of_initTMR6 0007                __pnvBANK0 004C  
      __size_of_setServo 0039           _uart_rec_buff_ 00A0                 ?_getData 0070  
          ??_setDutyPWM1 003F            ??_setDutyPWM2 003F            ??_setDutyPWM3 003F  
          ??_setDutyPWM4 003F                 ?_initInt 0070               setServo@id 0078  
              getData@d0 0073                getData@d1 0070                clear_ram0 03A6  
           ??_getPicAddr 0071    __end_of_initFrequency 03A6    __end_of_initRegisters 0361  
    __end_of_setDutyPWM1 01D9      __end_of_setDutyPWM2 01A4      __end_of_setDutyPWM3 016F  
    __end_of_setDutyPWM4 013A       __end_of_getPicAddr 0398    __end_of_initVariables 02C1  
              memset@len 003E                memset@val 003D                memset@str 0041  
       __size_of_getData 0015                 _arg0buff 0022                 _arg1buff 002B  
       __size_of_initInt 0005                 _getSAddr 0384                 __ptext10 013A  
               __ptext11 02C1                 __ptext20 0209                 __ptext12 016F  
               __ptext21 0239                 __ptext13 030B                 __ptext22 0269  
               __ptext14 01A4                 __ptext23 0384                 __ptext15 03AC  
               __ptext24 038E                 __ptext16 039F                 __ptext25 0339  
               __ptext18 00CC                 __ptext19 01D9            _uart_rec_buff 004C  
               _initUART 0361                 _initPWM1 030B                 _initPWM2 02C1  
               _initPWM3 02F3                 _initPWM4 02DB                 _initTMR6 0398  
          __size_of_main 003F             getPicAddr@d0 0072             getPicAddr@d1 0070  
               _setServo 00CC                 int$flags 007E         ??_ringbufferInit 003D  
               main@argc 0044                 main@argv 0046              _setDutyPWM1 01A4  
            _setDutyPWM2 016F              _setDutyPWM3 013A              _setDutyPWM4 0105  
               intlevel1 0000        __CFG_CLKOUTEN$OFF 0000    __end_ofi1_setDutyPWM1 0299  
  __end_ofi1_setDutyPWM2 0269    __end_ofi1_setDutyPWM3 0239    __end_ofi1_setDutyPWM4 0209  
