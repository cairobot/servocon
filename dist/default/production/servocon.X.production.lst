

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Mar 10 13:30:01 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000D                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  008C                     	;# 
    67  008D                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  0111                     	;# 
    86  0112                     	;# 
    87  0113                     	;# 
    88  0114                     	;# 
    89  0115                     	;# 
    90  0116                     	;# 
    91  0117                     	;# 
    92  0118                     	;# 
    93  0119                     	;# 
    94  011A                     	;# 
    95  011B                     	;# 
    96  011D                     	;# 
    97  011E                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0191                     	;# 
   101  0191                     	;# 
   102  0192                     	;# 
   103  0193                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0194                     	;# 
   107  0195                     	;# 
   108  0196                     	;# 
   109  0199                     	;# 
   110  019A                     	;# 
   111  019B                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019C                     	;# 
   116  019C                     	;# 
   117  019D                     	;# 
   118  019E                     	;# 
   119  019F                     	;# 
   120  020C                     	;# 
   121  020D                     	;# 
   122  0211                     	;# 
   123  0211                     	;# 
   124  0212                     	;# 
   125  0212                     	;# 
   126  0213                     	;# 
   127  0213                     	;# 
   128  0214                     	;# 
   129  0214                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0216                     	;# 
   134  0216                     	;# 
   135  0217                     	;# 
   136  0217                     	;# 
   137  0219                     	;# 
   138  021A                     	;# 
   139  021B                     	;# 
   140  021C                     	;# 
   141  021D                     	;# 
   142  021E                     	;# 
   143  021F                     	;# 
   144  0291                     	;# 
   145  0291                     	;# 
   146  0292                     	;# 
   147  0293                     	;# 
   148  0294                     	;# 
   149  0295                     	;# 
   150  0295                     	;# 
   151  0296                     	;# 
   152  0298                     	;# 
   153  0298                     	;# 
   154  0299                     	;# 
   155  029A                     	;# 
   156  029B                     	;# 
   157  029C                     	;# 
   158  029C                     	;# 
   159  029D                     	;# 
   160  029E                     	;# 
   161  029E                     	;# 
   162  0311                     	;# 
   163  0311                     	;# 
   164  0312                     	;# 
   165  0313                     	;# 
   166  0318                     	;# 
   167  0318                     	;# 
   168  0319                     	;# 
   169  031A                     	;# 
   170  0394                     	;# 
   171  0395                     	;# 
   172  0396                     	;# 
   173  039A                     	;# 
   174  039C                     	;# 
   175  039D                     	;# 
   176  039E                     	;# 
   177  039F                     	;# 
   178  0415                     	;# 
   179  0416                     	;# 
   180  0417                     	;# 
   181  041C                     	;# 
   182  041D                     	;# 
   183  041E                     	;# 
   184  0FE4                     	;# 
   185  0FE5                     	;# 
   186  0FE6                     	;# 
   187  0FE7                     	;# 
   188  0FE8                     	;# 
   189  0FE9                     	;# 
   190  0FEA                     	;# 
   191  0FEB                     	;# 
   192  0FED                     	;# 
   193  0FEE                     	;# 
   194  0FEF                     	;# 
   195                           
   196                           	psect	nvBANK0
   197  0029                     __pnvBANK0:	
   198  0029                     _dat0:	
   199  0029                     	ds	2
   200  002B                     _dat1:	
   201  002B                     	ds	2
   202  000C                     _PORTA	set	12
   203  000D                     _PORTB	set	13
   204  005F                     _GIE	set	95
   205  005E                     _PEIE	set	94
   206  008D                     _RCIF	set	141
   207  0099                     _TMR4IF	set	153
   208  009B                     _TMR6IF	set	155
   209  009D                     _ADCON0	set	157
   210  009E                     _ADCON1	set	158
   211  009C                     _ADRESH	set	156
   212  0098                     _OSCTUNE	set	152
   213  008C                     _TRISA	set	140
   214  008D                     _TRISB	set	141
   215  04E8                     _ADON	set	1256
   216  04E9                     _GO_nDONE	set	1257
   217  04CB                     _IRCF0	set	1227
   218  04CC                     _IRCF1	set	1228
   219  04CD                     _IRCF2	set	1229
   220  04CE                     _IRCF3	set	1230
   221  048D                     _RCIE	set	1165
   222  0499                     _TMR4IE	set	1177
   223  04AF                     _nWPUEN	set	1199
   224  08EB                     _CCP2SEL	set	2283
   225  08EF                     _RXDTSEL	set	2287
   226  08F0                     _TXCKSEL	set	2288
   227  018C                     _ANSELA	set	396
   228  018D                     _ANSELB	set	397
   229  0199                     _RCREG	set	409
   230  019B                     _SPBRG	set	411
   231  019A                     _TXREG	set	410
   232  0CFB                     _BRG16	set	3323
   233  0CF2                     _BRGH	set	3314
   234  0CEC                     _CREN	set	3308
   235  0CEF                     _SPEN	set	3311
   236  0CF4                     _SYNC	set	3316
   237  0CF1                     _TRMT	set	3313
   238  0CF5                     _TXEN	set	3317
   239  020D                     _WPUB	set	525
   240  0293                     _CCP1CON	set	659
   241  029A                     _CCP2CON	set	666
   242  0291                     _CCPR1L	set	657
   243  0298                     _CCPR2L	set	664
   244  029E                     _CCPTMRS	set	670
   245  0313                     _CCP3CON	set	787
   246  031A                     _CCP4CON	set	794
   247  0311                     _CCPR3L	set	785
   248  0318                     _CCPR4L	set	792
   249  0416                     _PR4	set	1046
   250  041D                     _PR6	set	1053
   251  0417                     _T4CON	set	1047
   252  041E                     _T6CON	set	1054
   253  0415                     _TMR4	set	1045
   254                           
   255                           ; #config settings
   256  0000                     
   257                           	psect	cinit
   258  0076                     start_initialization:	
   259  0076                     __initialization:	
   260                           
   261                           ; Clear objects allocated to BANK0
   262  0076  01AD               	clrf	__pbssBANK0& (0+127)
   263  0077  01AE               	clrf	(__pbssBANK0+1)& (0+127)
   264  0078                     end_of_initialization:	
   265                           ;End of C runtime variable initialization code
   266                           
   267  0078                     __end_of__initialization:	
   268  0078  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   269  0079  0020               	movlb	0
   270  007A  3180  287C         	ljmp	_main	;jump to C main() function
   271                           
   272                           	psect	bssBANK0
   273  002D                     __pbssBANK0:	
   274  002D                     _cycle_adc:	
   275  002D                     	ds	1
   276  002E                     _cycle_timeout:	
   277  002E                     	ds	1
   278                           
   279                           	psect	cstackCOMMON
   280  0070                     __pcstackCOMMON:	
   281  0070                     ?_initFrequency:	
   282  0070                     ?_initRegisters:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_initVariables:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_initUART:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_initTMR4:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_initTMR6:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_initADC:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_initPWM1:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_initPWM2:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_initPWM3:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_initPWM4:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_initInt:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_putc:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_getPicAddr:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_getSAddr:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_getData:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_ISR:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?i1_setDutyPWM1:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?i1_setDutyPWM2:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?i1_setDutyPWM3:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?i1_setDutyPWM4:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_main:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     getPicAddr@d1:	
   346                           ; 2 bytes @ 0x0
   347                           
   348  0070                     getSAddr@d1:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     getData@d1:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     i1setDutyPWM1@duty:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     i1setDutyPWM2@duty:	
   358                           ; 2 bytes @ 0x0
   359                           
   360  0070                     i1setDutyPWM3@duty:	
   361                           ; 2 bytes @ 0x0
   362                           
   363  0070                     i1setDutyPWM4@duty:	
   364                           ; 2 bytes @ 0x0
   365                           
   366                           
   367                           ; 2 bytes @ 0x0
   368  0070                     	ds	1
   369  0071                     ??_getPicAddr:	
   370  0071                     ??_getSAddr:	
   371                           ; 1 bytes @ 0x1
   372                           
   373  0071                     ??_getData:	
   374                           ; 1 bytes @ 0x1
   375                           
   376                           
   377                           ; 1 bytes @ 0x1
   378  0071                     	ds	1
   379  0072                     ??i1_setDutyPWM1:	
   380  0072                     ??i1_setDutyPWM2:	
   381                           ; 1 bytes @ 0x2
   382                           
   383  0072                     ??i1_setDutyPWM3:	
   384                           ; 1 bytes @ 0x2
   385                           
   386  0072                     ??i1_setDutyPWM4:	
   387                           ; 1 bytes @ 0x2
   388                           
   389  0072                     getPicAddr@d0:	
   390                           ; 1 bytes @ 0x2
   391                           
   392  0072                     getSAddr@d0:	
   393                           ; 1 bytes @ 0x2
   394                           
   395                           
   396                           ; 1 bytes @ 0x2
   397  0072                     	ds	1
   398  0073                     getData@d0:	
   399                           
   400                           ; 1 bytes @ 0x3
   401  0073                     	ds	1
   402  0074                     getData@ret:	
   403                           
   404                           ; 1 bytes @ 0x4
   405  0074                     	ds	1
   406  0075                     ?_setServo:	
   407  0075                     setServo@val:	
   408                           ; 1 bytes @ 0x5
   409                           
   410                           
   411                           ; 1 bytes @ 0x5
   412  0075                     	ds	1
   413  0076                     ??_setServo:	
   414                           
   415                           ; 1 bytes @ 0x6
   416  0076                     	ds	2
   417  0078                     setServo@id:	
   418                           
   419                           ; 1 bytes @ 0x8
   420  0078                     	ds	1
   421  0079                     ??_ISR:	
   422                           
   423                           ; 1 bytes @ 0x9
   424  0079                     	ds	4
   425                           
   426                           	psect	cstackBANK0
   427  0020                     __pcstackBANK0:	
   428  0020                     ??_initFrequency:	
   429  0020                     ??_initRegisters:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0020                     ??_initVariables:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0020                     ??_initUART:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0020                     ??_initTMR4:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0020                     ??_initTMR6:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0020                     ??_initADC:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0020                     ?_setDutyPWM1:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0020                     ?_setDutyPWM2:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0020                     ?_setDutyPWM3:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0020                     ?_setDutyPWM4:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0020                     ??_initInt:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0020                     ??_putc:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0020                     putc@c:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0020                     setDutyPWM1@duty:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0020                     setDutyPWM2@duty:	
   472                           ; 2 bytes @ 0x0
   473                           
   474  0020                     setDutyPWM3@duty:	
   475                           ; 2 bytes @ 0x0
   476                           
   477  0020                     setDutyPWM4@duty:	
   478                           ; 2 bytes @ 0x0
   479                           
   480                           
   481                           ; 2 bytes @ 0x0
   482  0020                     	ds	2
   483  0022                     ??_setDutyPWM1:	
   484  0022                     ??_setDutyPWM2:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0022                     ??_setDutyPWM3:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  0022                     ??_setDutyPWM4:	
   491                           ; 1 bytes @ 0x2
   492                           
   493                           
   494                           ; 1 bytes @ 0x2
   495  0022                     	ds	2
   496  0024                     ??_initPWM1:	
   497  0024                     ??_initPWM2:	
   498                           ; 1 bytes @ 0x4
   499                           
   500  0024                     ??_initPWM3:	
   501                           ; 1 bytes @ 0x4
   502                           
   503  0024                     ??_initPWM4:	
   504                           ; 1 bytes @ 0x4
   505                           
   506                           
   507                           ; 1 bytes @ 0x4
   508  0024                     	ds	1
   509  0025                     ??_main:	
   510                           
   511                           ; 1 bytes @ 0x5
   512  0025                     	ds	2
   513  0027                     main@adc_val:	
   514                           
   515                           ; 1 bytes @ 0x7
   516  0027                     	ds	1
   517  0028                     main@buf:	
   518                           
   519                           ; 1 bytes @ 0x8
   520  0028                     	ds	1
   521                           
   522                           	psect	maintext
   523  007C                     __pmaintext:	
   524 ;;
   525 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   526 ;;
   527 ;; *************** function _main *****************
   528 ;; Defined at:
   529 ;;		line 309 in file "main.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;		None
   532 ;; Auto vars:     Size  Location     Type
   533 ;;  buf             1    8[BANK0 ] unsigned char 
   534 ;;  adc_val         1    7[BANK0 ] unsigned char 
   535 ;; Return value:  Size  Location     Type
   536 ;;                  2  229[None  ] int 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : B1F/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   544 ;;      Params:         0       0       0       0       0       0
   545 ;;      Locals:         0       2       0       0       0       0
   546 ;;      Temps:          0       2       0       0       0       0
   547 ;;      Totals:         0       4       0       0       0       0
   548 ;;Total ram usage:        4 bytes
   549 ;; Hardware stack levels required when called:    5
   550 ;; This function calls:
   551 ;;		_initADC
   552 ;;		_initFrequency
   553 ;;		_initInt
   554 ;;		_initPWM1
   555 ;;		_initPWM2
   556 ;;		_initPWM3
   557 ;;		_initPWM4
   558 ;;		_initRegisters
   559 ;;		_initTMR4
   560 ;;		_initTMR6
   561 ;;		_initUART
   562 ;;		_initVariables
   563 ;;		_putc
   564 ;;		_setDutyPWM1
   565 ;;		_setDutyPWM2
   566 ;;		_setDutyPWM3
   567 ;;		_setDutyPWM4
   568 ;; This function is called by:
   569 ;;		Startup code after reset
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           
   574                           ;psect for function _main
   575  007C                     _main:	
   576                           
   577                           ;main.c: 310: uint8_t adc_val;
   578                           ;main.c: 311: uint8_t buf;
   579                           ;main.c: 312: initFrequency();
   580                           
   581                           ;incstack = 0
   582                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   583  007C  3183  239B  3180   	fcall	_initFrequency
   584                           
   585                           ;main.c: 313: initRegisters();
   586  007F  3183  2331  3180   	fcall	_initRegisters
   587                           
   588                           ;main.c: 314: initVariables();
   589  0082  3183  2356  3180   	fcall	_initVariables
   590                           
   591                           ;main.c: 315: initUART();
   592  0085  3183  2344  3180   	fcall	_initUART
   593                           
   594                           ;main.c: 316: initTMR4();
   595  0088  3183  2381  3180   	fcall	_initTMR4
   596                           
   597                           ;main.c: 317: initTMR6();
   598  008B  3183  2393  3180   	fcall	_initTMR6
   599                           
   600                           ;main.c: 318: initADC();
   601  008E  3183  238A  3180   	fcall	_initADC
   602                           
   603                           ;main.c: 319: initPWM1();
   604  0091  3183  2304  3180   	fcall	_initPWM1
   605                           
   606                           ;main.c: 320: initPWM2();
   607  0094  3182  22BA  3180   	fcall	_initPWM2
   608                           
   609                           ;main.c: 321: initPWM3();
   610  0097  3182  22EC  3180   	fcall	_initPWM3
   611                           
   612                           ;main.c: 322: initPWM4();
   613  009A  3182  22D4  3180   	fcall	_initPWM4
   614                           
   615                           ;main.c: 323: setDutyPWM1(0);
   616  009D  3000               	movlw	0
   617  009E  0020               	movlb	0	; select bank0
   618  009F  00A0               	movwf	setDutyPWM1@duty
   619  00A0  00A1               	movwf	setDutyPWM1@duty+1
   620  00A1  3181  21F2  3180   	fcall	_setDutyPWM1
   621                           
   622                           ;main.c: 324: setDutyPWM2(0);
   623  00A4  3000               	movlw	0
   624  00A5  0020               	movlb	0	; select bank0
   625  00A6  00A0               	movwf	setDutyPWM2@duty
   626  00A7  00A1               	movwf	setDutyPWM2@duty+1
   627  00A8  3181  21C6  3180   	fcall	_setDutyPWM2
   628                           
   629                           ;main.c: 325: setDutyPWM3(0);
   630  00AB  3000               	movlw	0
   631  00AC  0020               	movlb	0	; select bank0
   632  00AD  00A0               	movwf	setDutyPWM3@duty
   633  00AE  00A1               	movwf	setDutyPWM3@duty+1
   634  00AF  3181  219A  3180   	fcall	_setDutyPWM3
   635                           
   636                           ;main.c: 326: setDutyPWM4(0);
   637  00B2  3000               	movlw	0
   638  00B3  0020               	movlb	0	; select bank0
   639  00B4  00A0               	movwf	setDutyPWM4@duty
   640  00B5  00A1               	movwf	setDutyPWM4@duty+1
   641  00B6  3181  216E  3180   	fcall	_setDutyPWM4
   642                           
   643                           ;main.c: 327: initInt();
   644  00B9  3183  23A2  3180   	fcall	_initInt
   645  00BC                     l1330:	
   646                           ;main.c: 329: while (1) {
   647                           
   648                           
   649                           ;main.c: 330: if (cycle_adc == 0x0a) {
   650  00BC  300A               	movlw	10
   651  00BD  0020               	movlb	0	; select bank0
   652  00BE  062D               	xorwf	_cycle_adc,w	;volatile
   653  00BF  1D03               	btfss	3,2
   654  00C0  2914               	goto	l1370
   655                           
   656                           ;main.c: 332: ADON = 1;
   657  00C1  0021               	movlb	1	; select bank1
   658  00C2  141D               	bsf	29,0	;volatile
   659                           
   660                           ;main.c: 333: _delay((unsigned long)((10)*(4000000/4000.0)));
   661  00C3  300D               	movlw	13
   662  00C4  0020               	movlb	0	; select bank0
   663  00C5  00A6               	movwf	??_main+1
   664  00C6  30FB               	movlw	251
   665  00C7  00A5               	movwf	??_main
   666  00C8                     u797:	
   667  00C8  0BA5               	decfsz	??_main,f
   668  00C9  28C8               	goto	u797
   669  00CA  0BA6               	decfsz	??_main+1,f
   670  00CB  28C8               	goto	u797
   671  00CC  3200               	nop2
   672                           
   673                           ;main.c: 334: GO_nDONE = 1;
   674  00CD  0021               	movlb	1	; select bank1
   675  00CE  149D               	bsf	29,1	;volatile
   676  00CF                     l232:	
   677                           ;main.c: 335: while (GO_nDONE);
   678                           
   679  00CF  189D               	btfsc	29,1	;volatile
   680  00D0  28CF               	goto	l232
   681                           
   682                           ;main.c: 336: adc_val = ADRESH;
   683  00D1  081C               	movf	28,w	;volatile
   684  00D2  0020               	movlb	0	; select bank0
   685  00D3  00A5               	movwf	??_main
   686  00D4  0825               	movf	??_main,w
   687  00D5  00A7               	movwf	main@adc_val
   688                           
   689                           ;main.c: 337: ADON = 0;
   690  00D6  0021               	movlb	1	; select bank1
   691  00D7  101D               	bcf	29,0	;volatile
   692                           
   693                           ;main.c: 339: putc('>');
   694  00D8  303E               	movlw	62
   695  00D9  3183  2362  3180   	fcall	_putc
   696                           
   697                           ;main.c: 340: buf = (adc_val >> 4) & 0x0f;
   698  00DC  0020               	movlb	0	; select bank0
   699  00DD  0827               	movf	main@adc_val,w
   700  00DE  00A5               	movwf	??_main
   701  00DF  3004               	movlw	4
   702  00E0                     u755:	
   703  00E0  36A5               	lsrf	??_main,f
   704  00E1  0B89               	decfsz	9,f
   705  00E2  28E0               	goto	u755
   706  00E3  0825               	movf	??_main,w
   707  00E4  390F               	andlw	15
   708  00E5  00A6               	movwf	??_main+1
   709  00E6  0826               	movf	??_main+1,w
   710  00E7  00A8               	movwf	main@buf
   711                           
   712                           ;main.c: 341: if (buf >= 0x0a)
   713  00E8  300A               	movlw	10
   714  00E9  0228               	subwf	main@buf,w
   715  00EA  1C03               	skipc
   716  00EB  28EE               	goto	l1350
   717                           
   718                           ;main.c: 342: buf += 'a' - 0x0a;
   719  00EC  3057               	movlw	87
   720  00ED  28EF               	goto	L1
   721  00EE                     l1350:	
   722                           
   723                           ;main.c: 343: else
   724                           ;main.c: 344: buf += '0';
   725  00EE  3030               	movlw	48
   726  00EF                     L1:	
   727  00EF  00A5               	movwf	??_main
   728  00F0  0825               	movf	??_main,w
   729  00F1  07A8               	addwf	main@buf,f
   730                           
   731                           ;main.c: 345: putc(buf);
   732  00F2  0828               	movf	main@buf,w
   733  00F3  3183  2362  3180   	fcall	_putc
   734                           
   735                           ;main.c: 346: buf = adc_val & 0x0f;
   736  00F6  0020               	movlb	0	; select bank0
   737  00F7  0827               	movf	main@adc_val,w
   738  00F8  390F               	andlw	15
   739  00F9  00A5               	movwf	??_main
   740  00FA  0825               	movf	??_main,w
   741  00FB  00A8               	movwf	main@buf
   742                           
   743                           ;main.c: 347: if (buf >= 0x0a)
   744  00FC  300A               	movlw	10
   745  00FD  0228               	subwf	main@buf,w
   746  00FE  1C03               	skipc
   747  00FF  2902               	goto	l1360
   748                           
   749                           ;main.c: 348: buf += 'a' - 0x0a;
   750  0100  3057               	movlw	87
   751  0101  2903               	goto	L2
   752  0102                     l1360:	
   753                           
   754                           ;main.c: 349: else
   755                           ;main.c: 350: buf += '0';
   756  0102  3030               	movlw	48
   757  0103                     L2:	
   758  0103  00A5               	movwf	??_main
   759  0104  0825               	movf	??_main,w
   760  0105  07A8               	addwf	main@buf,f
   761                           
   762                           ;main.c: 351: putc(buf);
   763  0106  0828               	movf	main@buf,w
   764  0107  3183  2362  3180   	fcall	_putc
   765                           
   766                           ;main.c: 352: putc('h');
   767  010A  3068               	movlw	104
   768  010B  3183  2362  3180   	fcall	_putc
   769                           
   770                           ;main.c: 353: putc('<');
   771  010E  303C               	movlw	60
   772  010F  3183  2362  3180   	fcall	_putc
   773                           
   774                           ;main.c: 355: cycle_adc = 0;
   775  0112  0020               	movlb	0	; select bank0
   776  0113  01AD               	clrf	_cycle_adc	;volatile
   777  0114                     l1370:	
   778                           
   779                           ;main.c: 356: }
   780                           ;main.c: 357: if (cycle_timeout == 0xff) {
   781  0114  0A2E               	incf	_cycle_timeout,w	;volatile
   782  0115  1D03               	btfss	3,2
   783  0116  28BC               	goto	l1330
   784                           
   785                           ;main.c: 359: setDutyPWM1(0);
   786  0117  3000               	movlw	0
   787  0118  00A0               	movwf	setDutyPWM1@duty
   788  0119  00A1               	movwf	setDutyPWM1@duty+1
   789  011A  3181  21F2  3180   	fcall	_setDutyPWM1
   790                           
   791                           ;main.c: 360: setDutyPWM2(0);
   792  011D  3000               	movlw	0
   793  011E  0020               	movlb	0	; select bank0
   794  011F  00A0               	movwf	setDutyPWM2@duty
   795  0120  00A1               	movwf	setDutyPWM2@duty+1
   796  0121  3181  21C6  3180   	fcall	_setDutyPWM2
   797                           
   798                           ;main.c: 361: setDutyPWM3(0);
   799  0124  3000               	movlw	0
   800  0125  0020               	movlb	0	; select bank0
   801  0126  00A0               	movwf	setDutyPWM3@duty
   802  0127  00A1               	movwf	setDutyPWM3@duty+1
   803  0128  3181  219A  3180   	fcall	_setDutyPWM3
   804                           
   805                           ;main.c: 362: setDutyPWM4(0);
   806  012B  3000               	movlw	0
   807  012C  0020               	movlb	0	; select bank0
   808  012D  00A0               	movwf	setDutyPWM4@duty
   809  012E  00A1               	movwf	setDutyPWM4@duty+1
   810  012F  3181  216E  3180   	fcall	_setDutyPWM4
   811                           
   812                           ;main.c: 364: cycle_timeout = 0;
   813  0132  0020               	movlb	0	; select bank0
   814  0133  01AE               	clrf	_cycle_timeout	;volatile
   815  0134  28BC               	goto	l1330
   816  0135                     __end_of_main:	
   817                           
   818                           	psect	text1
   819  016E                     __ptext1:	
   820 ;; *************** function _setDutyPWM4 *****************
   821 ;; Defined at:
   822 ;;		line 190 in file "main.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;  duty            2    0[BANK0 ] unsigned int 
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   836 ;;      Params:         0       2       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0       0
   838 ;;      Temps:          0       2       0       0       0       0
   839 ;;      Totals:         0       4       0       0       0       0
   840 ;;Total ram usage:        4 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    3
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _setDutyPWM4
   852  016E                     _setDutyPWM4:	
   853                           
   854                           ;main.c: 197: if (duty > 0x03ff)
   855                           
   856                           ;incstack = 0
   857                           ; Regs used in _setDutyPWM4: [wreg+status,2+status,0]
   858  016E  3004               	movlw	4
   859  016F  0020               	movlb	0	; select bank0
   860  0170  0221               	subwf	setDutyPWM4@duty+1,w
   861  0171  3000               	movlw	0
   862  0172  1903               	skipnz
   863  0173  0220               	subwf	setDutyPWM4@duty,w
   864  0174  1C03               	skipc
   865  0175  297A               	goto	l1202
   866                           
   867                           ;main.c: 198: duty = 0x03ff;
   868  0176  30FF               	movlw	255
   869  0177  00A0               	movwf	setDutyPWM4@duty
   870  0178  3003               	movlw	3
   871  0179  00A1               	movwf	setDutyPWM4@duty+1
   872  017A                     l1202:	
   873                           
   874                           ;main.c: 201: CCP4CON &= ~0b00110000;
   875  017A  30CF               	movlw	207
   876  017B  00A2               	movwf	??_setDutyPWM4
   877  017C  0822               	movf	??_setDutyPWM4,w
   878  017D  0026               	movlb	6	; select bank6
   879  017E  059A               	andwf	26,f	;volatile
   880                           
   881                           ;main.c: 202: CCP4CON |= (duty & 0x02) << 4 ;
   882  017F  0020               	movlb	0	; select bank0
   883  0180  0820               	movf	setDutyPWM4@duty,w
   884  0181  3902               	andlw	2
   885  0182  00A2               	movwf	??_setDutyPWM4
   886  0183  3003               	movlw	3
   887  0184                     u595:	
   888  0184  35A2               	lslf	??_setDutyPWM4,f
   889  0185  3EFF               	addlw	-1
   890  0186  1D03               	skipz
   891  0187  2984               	goto	u595
   892  0188  3522               	lslf	??_setDutyPWM4,w
   893  0189  00A3               	movwf	??_setDutyPWM4+1
   894  018A  0823               	movf	??_setDutyPWM4+1,w
   895  018B  0026               	movlb	6	; select bank6
   896  018C  049A               	iorwf	26,f	;volatile
   897                           
   898                           ;main.c: 203: CCPR4L = (uint8_t) (duty >> 2);
   899  018D  0020               	movlb	0	; select bank0
   900  018E  0821               	movf	setDutyPWM4@duty+1,w
   901  018F  00A3               	movwf	??_setDutyPWM4+1
   902  0190  0820               	movf	setDutyPWM4@duty,w
   903  0191  00A2               	movwf	??_setDutyPWM4
   904  0192  36A3               	lsrf	??_setDutyPWM4+1,f
   905  0193  0CA2               	rrf	??_setDutyPWM4,f
   906  0194  36A3               	lsrf	??_setDutyPWM4+1,f
   907  0195  0CA2               	rrf	??_setDutyPWM4,f
   908  0196  0822               	movf	??_setDutyPWM4,w
   909  0197  0026               	movlb	6	; select bank6
   910  0198  0098               	movwf	24	;volatile
   911  0199  0008               	return
   912  019A                     __end_of_setDutyPWM4:	
   913                           
   914                           	psect	text2
   915  0362                     __ptext2:	
   916 ;; *************** function _putc *****************
   917 ;; Defined at:
   918 ;;		line 225 in file "main.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  c               1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  c               1    0[BANK0 ] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   932 ;;      Params:         0       0       0       0       0       0
   933 ;;      Locals:         0       1       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0       0
   935 ;;      Totals:         0       1       0       0       0       0
   936 ;;Total ram usage:        1 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    3
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_main
   943 ;;		_putstr
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _putc
   949  0362                     _putc:	
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _putc: [wreg]
   953                           ;putc@c stored from wreg
   954  0362  0020               	movlb	0	; select bank0
   955  0363  00A0               	movwf	putc@c
   956  0364                     l186:	
   957                           ;main.c: 226: while(!TRMT);
   958                           
   959  0364  0023               	movlb	3	; select bank3
   960  0365  1C9E               	btfss	30,1	;volatile
   961  0366  2B64               	goto	l186
   962                           
   963                           ;main.c: 227: TXREG = c;
   964  0367  0020               	movlb	0	; select bank0
   965  0368  0820               	movf	putc@c,w
   966  0369  0023               	movlb	3	; select bank3
   967  036A  009A               	movwf	26	;volatile
   968                           
   969                           ;main.c: 228: __nop();
   970  036B  0000               	nop
   971  036C  0008               	return
   972  036D                     __end_of_putc:	
   973                           
   974                           	psect	text3
   975  0356                     __ptext3:	
   976 ;; *************** function _initVariables *****************
   977 ;; Defined at:
   978 ;;		line 48 in file "main.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;		None
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      void 
   985 ;; Registers used:
   986 ;;		wreg, status,2
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   992 ;;      Params:         0       0       0       0       0       0
   993 ;;      Locals:         0       0       0       0       0       0
   994 ;;      Temps:          0       0       0       0       0       0
   995 ;;      Totals:         0       0       0       0       0       0
   996 ;;Total ram usage:        0 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    3
   999 ;; This function calls:
  1000 ;;		Nothing
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           
  1007                           ;psect for function _initVariables
  1008  0356                     _initVariables:	
  1009                           
  1010                           ;main.c: 49: dat0 = -1;
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _initVariables: [wreg+status,2]
  1014  0356  30FF               	movlw	255
  1015  0357  0020               	movlb	0	; select bank0
  1016  0358  00A9               	movwf	_dat0	;volatile
  1017  0359  30FF               	movlw	255
  1018  035A  00AA               	movwf	_dat0+1	;volatile
  1019                           
  1020                           ;main.c: 50: dat1 = -1;
  1021  035B  30FF               	movlw	255
  1022  035C  00AB               	movwf	_dat1	;volatile
  1023  035D  30FF               	movlw	255
  1024  035E  00AC               	movwf	_dat1+1	;volatile
  1025                           
  1026                           ;main.c: 51: cycle_adc = 0;
  1027  035F  01AD               	clrf	_cycle_adc	;volatile
  1028                           
  1029                           ;main.c: 52: cycle_timeout = 0;
  1030  0360  01AE               	clrf	_cycle_timeout	;volatile
  1031  0361  0008               	return
  1032  0362                     __end_of_initVariables:	
  1033                           
  1034                           	psect	text4
  1035  0344                     __ptext4:	
  1036 ;; *************** function _initUART *****************
  1037 ;; Defined at:
  1038 ;;		line 55 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1052 ;;      Params:         0       0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0       0
  1055 ;;      Totals:         0       0       0       0       0       0
  1056 ;;Total ram usage:        0 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    3
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           
  1067                           ;psect for function _initUART
  1068  0344                     _initUART:	
  1069                           
  1070                           ;main.c: 56: RXDTSEL = 0;
  1071                           
  1072                           ;incstack = 0
  1073                           ; Regs used in _initUART: [wreg]
  1074  0344  0022               	movlb	2	; select bank2
  1075  0345  139D               	bcf	29,7	;volatile
  1076                           
  1077                           ;main.c: 57: TXCKSEL = 0;
  1078  0346  101E               	bcf	30,0	;volatile
  1079                           
  1080                           ;main.c: 59: CREN = 1;
  1081  0347  0023               	movlb	3	; select bank3
  1082  0348  161D               	bsf	29,4	;volatile
  1083                           
  1084                           ;main.c: 60: TXEN = 1;
  1085  0349  169E               	bsf	30,5	;volatile
  1086                           
  1087                           ;main.c: 61: SYNC = 0;
  1088  034A  121E               	bcf	30,4	;volatile
  1089                           
  1090                           ;main.c: 69: BRGH = 1;
  1091  034B  151E               	bsf	30,2	;volatile
  1092                           
  1093                           ;main.c: 70: BRG16 = 1;
  1094  034C  159F               	bsf	31,3	;volatile
  1095                           
  1096                           ;main.c: 71: SPBRG = 8;
  1097  034D  3008               	movlw	8
  1098  034E  009B               	movwf	27	;volatile
  1099                           
  1100                           ;main.c: 74: SPEN = 1;
  1101  034F  179D               	bsf	29,7	;volatile
  1102  0350                     l1136:	
  1103                           ;main.c: 76: while (RCIF)
  1104                           
  1105  0350  0020               	movlb	0	; select bank0
  1106  0351  1E91               	btfss	17,5	;volatile
  1107  0352  0008               	return
  1108                           
  1109                           ;main.c: 77: RCREG;
  1110  0353  0023               	movlb	3	; select bank3
  1111  0354  0819               	movf	25,w	;volatile
  1112  0355  2B50               	goto	l1136
  1113  0356                     __end_of_initUART:	
  1114                           
  1115                           	psect	text5
  1116  0393                     __ptext5:	
  1117 ;; *************** function _initTMR6 *****************
  1118 ;; Defined at:
  1119 ;;		line 87 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1133 ;;      Params:         0       0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0
  1136 ;;      Totals:         0       0       0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    3
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function _initTMR6
  1149  0393                     _initTMR6:	
  1150                           
  1151                           ;main.c: 89: PR6 = 0xff;
  1152                           
  1153                           ;incstack = 0
  1154                           ; Regs used in _initTMR6: [wreg]
  1155  0393  30FF               	movlw	255
  1156  0394  0028               	movlb	8	; select bank8
  1157  0395  009D               	movwf	29	;volatile
  1158                           
  1159                           ;main.c: 90: T6CON = 0b111;
  1160  0396  3007               	movlw	7
  1161  0397  009E               	movwf	30	;volatile
  1162                           
  1163                           ;main.c: 91: TMR6IF = 0;
  1164  0398  0020               	movlb	0	; select bank0
  1165  0399  1193               	bcf	19,3	;volatile
  1166  039A  0008               	return
  1167  039B                     __end_of_initTMR6:	
  1168                           
  1169                           	psect	text6
  1170  0381                     __ptext6:	
  1171 ;; *************** function _initTMR4 *****************
  1172 ;; Defined at:
  1173 ;;		line 80 in file "main.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;		None
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1187 ;;      Params:         0       0       0       0       0       0
  1188 ;;      Locals:         0       0       0       0       0       0
  1189 ;;      Temps:          0       0       0       0       0       0
  1190 ;;      Totals:         0       0       0       0       0       0
  1191 ;;Total ram usage:        0 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    3
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           
  1202                           ;psect for function _initTMR4
  1203  0381                     _initTMR4:	
  1204                           
  1205                           ;main.c: 81: TMR4 = 0x00;
  1206                           
  1207                           ;incstack = 0
  1208                           ; Regs used in _initTMR4: [wreg+status,2]
  1209  0381  0028               	movlb	8	; select bank8
  1210  0382  0195               	clrf	21	;volatile
  1211                           
  1212                           ;main.c: 82: PR4 = 0xff;
  1213  0383  30FF               	movlw	255
  1214  0384  0096               	movwf	22	;volatile
  1215                           
  1216                           ;main.c: 83: T4CON = 0b01110111;
  1217  0385  3077               	movlw	119
  1218  0386  0097               	movwf	23	;volatile
  1219                           
  1220                           ;main.c: 84: TMR4IF = 0;
  1221  0387  0020               	movlb	0	; select bank0
  1222  0388  1093               	bcf	19,1	;volatile
  1223  0389  0008               	return
  1224  038A                     __end_of_initTMR4:	
  1225                           
  1226                           	psect	text7
  1227  0331                     __ptext7:	
  1228 ;; *************** function _initRegisters *****************
  1229 ;; Defined at:
  1230 ;;		line 35 in file "main.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;		None
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;		None
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, status,2
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1244 ;;      Params:         0       0       0       0       0       0
  1245 ;;      Locals:         0       0       0       0       0       0
  1246 ;;      Temps:          0       0       0       0       0       0
  1247 ;;      Totals:         0       0       0       0       0       0
  1248 ;;Total ram usage:        0 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    3
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _initRegisters
  1260  0331                     _initRegisters:	
  1261                           
  1262                           ;main.c: 36: PORTA = 0b00000000;
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _initRegisters: [wreg+status,2]
  1266  0331  0020               	movlb	0	; select bank0
  1267  0332  018C               	clrf	12	;volatile
  1268                           
  1269                           ;main.c: 37: ANSELA = 0b00000000;
  1270  0333  0023               	movlb	3	; select bank3
  1271  0334  018C               	clrf	12	;volatile
  1272                           
  1273                           ;main.c: 38: TRISA = 0b00000000;
  1274  0335  0021               	movlb	1	; select bank1
  1275  0336  018C               	clrf	12	;volatile
  1276                           
  1277                           ;main.c: 40: PORTB = 0b00000000;
  1278  0337  0020               	movlb	0	; select bank0
  1279  0338  018D               	clrf	13	;volatile
  1280                           
  1281                           ;main.c: 41: ANSELB = 0b00010000;
  1282  0339  3010               	movlw	16
  1283  033A  0023               	movlb	3	; select bank3
  1284  033B  008D               	movwf	13	;volatile
  1285                           
  1286                           ;main.c: 42: TRISB = 0b00010010;
  1287  033C  3012               	movlw	18
  1288  033D  0021               	movlb	1	; select bank1
  1289  033E  008D               	movwf	13	;volatile
  1290                           
  1291                           ;main.c: 44: WPUB = 0b00000000;
  1292  033F  0024               	movlb	4	; select bank4
  1293  0340  018D               	clrf	13	;volatile
  1294                           
  1295                           ;main.c: 45: nWPUEN = 0;
  1296  0341  0021               	movlb	1	; select bank1
  1297  0342  1395               	bcf	21,7	;volatile
  1298  0343  0008               	return
  1299  0344                     __end_of_initRegisters:	
  1300                           
  1301                           	psect	text8
  1302  02D4                     __ptext8:	
  1303 ;; *************** function _initPWM4 *****************
  1304 ;; Defined at:
  1305 ;;		line 207 in file "main.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, status,2, status,0, pclath, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1319 ;;      Params:         0       0       0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0
  1321 ;;      Temps:          0       1       0       0       0       0
  1322 ;;      Totals:         0       1       0       0       0       0
  1323 ;;Total ram usage:        1 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    4
  1326 ;; This function calls:
  1327 ;;		_setDutyPWM3
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           
  1334                           ;psect for function _initPWM4
  1335  02D4                     _initPWM4:	
  1336                           
  1337                           ;main.c: 209: TRISA |= 1 << 4;
  1338                           
  1339                           ;incstack = 0
  1340                           ; Regs used in _initPWM4: [wreg+status,2+status,0+pclath+cstack]
  1341  02D4  0021               	movlb	1	; select bank1
  1342  02D5  160C               	bsf	12,4	;volatile
  1343                           
  1344                           ;main.c: 210: CCP4CON = 0b00001100;
  1345  02D6  300C               	movlw	12
  1346  02D7  0026               	movlb	6	; select bank6
  1347  02D8  009A               	movwf	26	;volatile
  1348                           
  1349                           ;main.c: 211: setDutyPWM3(0);
  1350  02D9  3000               	movlw	0
  1351  02DA  0020               	movlb	0	; select bank0
  1352  02DB  00A0               	movwf	setDutyPWM3@duty
  1353  02DC  00A1               	movwf	setDutyPWM3@duty+1
  1354  02DD  3181  219A  3182   	fcall	_setDutyPWM3
  1355                           
  1356                           ;main.c: 212: CCPTMRS |= 0x02 << 6;
  1357  02E0  0025               	movlb	5	; select bank5
  1358  02E1  179E               	bsf	30,7	;volatile
  1359                           
  1360                           ;main.c: 213: TMR6IF = 0;
  1361  02E2  0020               	movlb	0	; select bank0
  1362  02E3  1193               	bcf	19,3	;volatile
  1363  02E4                     l177:	
  1364                           ;main.c: 214: while(!TMR6IF);
  1365                           
  1366  02E4  1D93               	btfss	19,3	;volatile
  1367  02E5  2AE4               	goto	l177
  1368                           
  1369                           ;main.c: 215: TRISA &= ~(1 << 4);
  1370  02E6  30EF               	movlw	239
  1371  02E7  00A4               	movwf	??_initPWM4
  1372  02E8  0824               	movf	??_initPWM4,w
  1373  02E9  0021               	movlb	1	; select bank1
  1374  02EA  058C               	andwf	12,f	;volatile
  1375  02EB  0008               	return
  1376  02EC                     __end_of_initPWM4:	
  1377                           
  1378                           	psect	text9
  1379  02EC                     __ptext9:	
  1380 ;; *************** function _initPWM3 *****************
  1381 ;; Defined at:
  1382 ;;		line 179 in file "main.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0, pclath, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1396 ;;      Params:         0       0       0       0       0       0
  1397 ;;      Locals:         0       0       0       0       0       0
  1398 ;;      Temps:          0       1       0       0       0       0
  1399 ;;      Totals:         0       1       0       0       0       0
  1400 ;;Total ram usage:        1 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    4
  1403 ;; This function calls:
  1404 ;;		_setDutyPWM3
  1405 ;; This function is called by:
  1406 ;;		_main
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           
  1411                           ;psect for function _initPWM3
  1412  02EC                     _initPWM3:	
  1413                           
  1414                           ;main.c: 181: TRISA |= 1 << 3;
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _initPWM3: [wreg+status,2+status,0+pclath+cstack]
  1418  02EC  0021               	movlb	1	; select bank1
  1419  02ED  158C               	bsf	12,3	;volatile
  1420                           
  1421                           ;main.c: 182: CCP3CON = 0b00001100;
  1422  02EE  300C               	movlw	12
  1423  02EF  0026               	movlb	6	; select bank6
  1424  02F0  0093               	movwf	19	;volatile
  1425                           
  1426                           ;main.c: 183: setDutyPWM3(0);
  1427  02F1  3000               	movlw	0
  1428  02F2  0020               	movlb	0	; select bank0
  1429  02F3  00A0               	movwf	setDutyPWM3@duty
  1430  02F4  00A1               	movwf	setDutyPWM3@duty+1
  1431  02F5  3181  219A  3182   	fcall	_setDutyPWM3
  1432                           
  1433                           ;main.c: 184: CCPTMRS |= 0x02 << 4;
  1434  02F8  0025               	movlb	5	; select bank5
  1435  02F9  169E               	bsf	30,5	;volatile
  1436                           
  1437                           ;main.c: 185: TMR6IF = 0;
  1438  02FA  0020               	movlb	0	; select bank0
  1439  02FB  1193               	bcf	19,3	;volatile
  1440  02FC                     l167:	
  1441                           ;main.c: 186: while(!TMR6IF);
  1442                           
  1443  02FC  1D93               	btfss	19,3	;volatile
  1444  02FD  2AFC               	goto	l167
  1445                           
  1446                           ;main.c: 187: TRISA &= ~(1 << 3);
  1447  02FE  30F7               	movlw	247
  1448  02FF  00A4               	movwf	??_initPWM3
  1449  0300  0824               	movf	??_initPWM3,w
  1450  0301  0021               	movlb	1	; select bank1
  1451  0302  058C               	andwf	12,f	;volatile
  1452  0303  0008               	return
  1453  0304                     __end_of_initPWM3:	
  1454                           
  1455                           	psect	text10
  1456  019A                     __ptext10:	
  1457 ;; *************** function _setDutyPWM3 *****************
  1458 ;; Defined at:
  1459 ;;		line 162 in file "main.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  duty            2    0[BANK0 ] unsigned int 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1473 ;;      Params:         0       2       0       0       0       0
  1474 ;;      Locals:         0       0       0       0       0       0
  1475 ;;      Temps:          0       2       0       0       0       0
  1476 ;;      Totals:         0       4       0       0       0       0
  1477 ;;Total ram usage:        4 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    3
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_initPWM3
  1484 ;;		_initPWM4
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function _setDutyPWM3
  1491  019A                     _setDutyPWM3:	
  1492                           
  1493                           ;main.c: 169: if (duty > 0x03ff)
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _setDutyPWM3: [wreg+status,2+status,0]
  1497  019A  3004               	movlw	4
  1498  019B  0020               	movlb	0	; select bank0
  1499  019C  0221               	subwf	setDutyPWM3@duty+1,w
  1500  019D  3000               	movlw	0
  1501  019E  1903               	skipnz
  1502  019F  0220               	subwf	setDutyPWM3@duty,w
  1503  01A0  1C03               	skipc
  1504  01A1  29A6               	goto	l1064
  1505                           
  1506                           ;main.c: 170: duty = 0x03ff;
  1507  01A2  30FF               	movlw	255
  1508  01A3  00A0               	movwf	setDutyPWM3@duty
  1509  01A4  3003               	movlw	3
  1510  01A5  00A1               	movwf	setDutyPWM3@duty+1
  1511  01A6                     l1064:	
  1512                           
  1513                           ;main.c: 173: CCP3CON &= ~0b00110000;
  1514  01A6  30CF               	movlw	207
  1515  01A7  00A2               	movwf	??_setDutyPWM3
  1516  01A8  0822               	movf	??_setDutyPWM3,w
  1517  01A9  0026               	movlb	6	; select bank6
  1518  01AA  0593               	andwf	19,f	;volatile
  1519                           
  1520                           ;main.c: 174: CCP3CON |= (duty & 0x02) << 4 ;
  1521  01AB  0020               	movlb	0	; select bank0
  1522  01AC  0820               	movf	setDutyPWM3@duty,w
  1523  01AD  3902               	andlw	2
  1524  01AE  00A2               	movwf	??_setDutyPWM3
  1525  01AF  3003               	movlw	3
  1526  01B0                     u455:	
  1527  01B0  35A2               	lslf	??_setDutyPWM3,f
  1528  01B1  3EFF               	addlw	-1
  1529  01B2  1D03               	skipz
  1530  01B3  29B0               	goto	u455
  1531  01B4  3522               	lslf	??_setDutyPWM3,w
  1532  01B5  00A3               	movwf	??_setDutyPWM3+1
  1533  01B6  0823               	movf	??_setDutyPWM3+1,w
  1534  01B7  0026               	movlb	6	; select bank6
  1535  01B8  0493               	iorwf	19,f	;volatile
  1536                           
  1537                           ;main.c: 175: CCPR3L = (uint8_t) (duty >> 2);
  1538  01B9  0020               	movlb	0	; select bank0
  1539  01BA  0821               	movf	setDutyPWM3@duty+1,w
  1540  01BB  00A3               	movwf	??_setDutyPWM3+1
  1541  01BC  0820               	movf	setDutyPWM3@duty,w
  1542  01BD  00A2               	movwf	??_setDutyPWM3
  1543  01BE  36A3               	lsrf	??_setDutyPWM3+1,f
  1544  01BF  0CA2               	rrf	??_setDutyPWM3,f
  1545  01C0  36A3               	lsrf	??_setDutyPWM3+1,f
  1546  01C1  0CA2               	rrf	??_setDutyPWM3,f
  1547  01C2  0822               	movf	??_setDutyPWM3,w
  1548  01C3  0026               	movlb	6	; select bank6
  1549  01C4  0091               	movwf	17	;volatile
  1550  01C5  0008               	return
  1551  01C6                     __end_of_setDutyPWM3:	
  1552                           
  1553                           	psect	text11
  1554  02BA                     __ptext11:	
  1555 ;; *************** function _initPWM2 *****************
  1556 ;; Defined at:
  1557 ;;		line 150 in file "main.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, pclath, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1571 ;;      Params:         0       0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0
  1573 ;;      Temps:          0       1       0       0       0       0
  1574 ;;      Totals:         0       1       0       0       0       0
  1575 ;;Total ram usage:        1 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    4
  1578 ;; This function calls:
  1579 ;;		_setDutyPWM2
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           
  1586                           ;psect for function _initPWM2
  1587  02BA                     _initPWM2:	
  1588                           
  1589                           ;main.c: 152: CCP2SEL = 1;
  1590                           
  1591                           ;incstack = 0
  1592                           ; Regs used in _initPWM2: [wreg+status,2+status,0+pclath+cstack]
  1593  02BA  0022               	movlb	2	; select bank2
  1594  02BB  159D               	bsf	29,3	;volatile
  1595                           
  1596                           ;main.c: 153: TRISA |= 1 << 7;
  1597  02BC  0021               	movlb	1	; select bank1
  1598  02BD  178C               	bsf	12,7	;volatile
  1599                           
  1600                           ;main.c: 154: CCP2CON = 0b00001100;
  1601  02BE  300C               	movlw	12
  1602  02BF  0025               	movlb	5	; select bank5
  1603  02C0  009A               	movwf	26	;volatile
  1604                           
  1605                           ;main.c: 155: setDutyPWM2(0);
  1606  02C1  3000               	movlw	0
  1607  02C2  0020               	movlb	0	; select bank0
  1608  02C3  00A0               	movwf	setDutyPWM2@duty
  1609  02C4  00A1               	movwf	setDutyPWM2@duty+1
  1610  02C5  3181  21C6  3182   	fcall	_setDutyPWM2
  1611                           
  1612                           ;main.c: 156: CCPTMRS |= 0x02 << 2;
  1613  02C8  0025               	movlb	5	; select bank5
  1614  02C9  159E               	bsf	30,3	;volatile
  1615                           
  1616                           ;main.c: 157: TMR6IF = 0;
  1617  02CA  0020               	movlb	0	; select bank0
  1618  02CB  1193               	bcf	19,3	;volatile
  1619  02CC                     l157:	
  1620                           ;main.c: 158: while(!TMR6IF);
  1621                           
  1622  02CC  1D93               	btfss	19,3	;volatile
  1623  02CD  2ACC               	goto	l157
  1624                           
  1625                           ;main.c: 159: TRISA &= ~(1 << 7);
  1626  02CE  307F               	movlw	127
  1627  02CF  00A4               	movwf	??_initPWM2
  1628  02D0  0824               	movf	??_initPWM2,w
  1629  02D1  0021               	movlb	1	; select bank1
  1630  02D2  058C               	andwf	12,f	;volatile
  1631  02D3  0008               	return
  1632  02D4                     __end_of_initPWM2:	
  1633                           
  1634                           	psect	text12
  1635  01C6                     __ptext12:	
  1636 ;; *************** function _setDutyPWM2 *****************
  1637 ;; Defined at:
  1638 ;;		line 133 in file "main.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  duty            2    0[BANK0 ] unsigned int 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1652 ;;      Params:         0       2       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0
  1654 ;;      Temps:          0       2       0       0       0       0
  1655 ;;      Totals:         0       4       0       0       0       0
  1656 ;;Total ram usage:        4 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    3
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_initPWM2
  1663 ;;		_main
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           
  1668                           ;psect for function _setDutyPWM2
  1669  01C6                     _setDutyPWM2:	
  1670                           
  1671                           ;main.c: 140: if (duty > 0x03ff)
  1672                           
  1673                           ;incstack = 0
  1674                           ; Regs used in _setDutyPWM2: [wreg+status,2+status,0]
  1675  01C6  3004               	movlw	4
  1676  01C7  0020               	movlb	0	; select bank0
  1677  01C8  0221               	subwf	setDutyPWM2@duty+1,w
  1678  01C9  3000               	movlw	0
  1679  01CA  1903               	skipnz
  1680  01CB  0220               	subwf	setDutyPWM2@duty,w
  1681  01CC  1C03               	skipc
  1682  01CD  29D2               	goto	l1054
  1683                           
  1684                           ;main.c: 141: duty = 0x03ff;
  1685  01CE  30FF               	movlw	255
  1686  01CF  00A0               	movwf	setDutyPWM2@duty
  1687  01D0  3003               	movlw	3
  1688  01D1  00A1               	movwf	setDutyPWM2@duty+1
  1689  01D2                     l1054:	
  1690                           
  1691                           ;main.c: 144: CCP2CON &= ~0b00110000;
  1692  01D2  30CF               	movlw	207
  1693  01D3  00A2               	movwf	??_setDutyPWM2
  1694  01D4  0822               	movf	??_setDutyPWM2,w
  1695  01D5  0025               	movlb	5	; select bank5
  1696  01D6  059A               	andwf	26,f	;volatile
  1697                           
  1698                           ;main.c: 145: CCP2CON |= (duty & 0x02) << 4 ;
  1699  01D7  0020               	movlb	0	; select bank0
  1700  01D8  0820               	movf	setDutyPWM2@duty,w
  1701  01D9  3902               	andlw	2
  1702  01DA  00A2               	movwf	??_setDutyPWM2
  1703  01DB  3003               	movlw	3
  1704  01DC                     u435:	
  1705  01DC  35A2               	lslf	??_setDutyPWM2,f
  1706  01DD  3EFF               	addlw	-1
  1707  01DE  1D03               	skipz
  1708  01DF  29DC               	goto	u435
  1709  01E0  3522               	lslf	??_setDutyPWM2,w
  1710  01E1  00A3               	movwf	??_setDutyPWM2+1
  1711  01E2  0823               	movf	??_setDutyPWM2+1,w
  1712  01E3  0025               	movlb	5	; select bank5
  1713  01E4  049A               	iorwf	26,f	;volatile
  1714                           
  1715                           ;main.c: 146: CCPR2L = (uint8_t) (duty >> 2);
  1716  01E5  0020               	movlb	0	; select bank0
  1717  01E6  0821               	movf	setDutyPWM2@duty+1,w
  1718  01E7  00A3               	movwf	??_setDutyPWM2+1
  1719  01E8  0820               	movf	setDutyPWM2@duty,w
  1720  01E9  00A2               	movwf	??_setDutyPWM2
  1721  01EA  36A3               	lsrf	??_setDutyPWM2+1,f
  1722  01EB  0CA2               	rrf	??_setDutyPWM2,f
  1723  01EC  36A3               	lsrf	??_setDutyPWM2+1,f
  1724  01ED  0CA2               	rrf	??_setDutyPWM2,f
  1725  01EE  0822               	movf	??_setDutyPWM2,w
  1726  01EF  0025               	movlb	5	; select bank5
  1727  01F0  0098               	movwf	24	;volatile
  1728  01F1  0008               	return
  1729  01F2                     __end_of_setDutyPWM2:	
  1730                           
  1731                           	psect	text13
  1732  0304                     __ptext13:	
  1733 ;; *************** function _initPWM1 *****************
  1734 ;; Defined at:
  1735 ;;		line 122 in file "main.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;		None
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;		None
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0, pclath, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1749 ;;      Params:         0       0       0       0       0       0
  1750 ;;      Locals:         0       0       0       0       0       0
  1751 ;;      Temps:          0       1       0       0       0       0
  1752 ;;      Totals:         0       1       0       0       0       0
  1753 ;;Total ram usage:        1 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    4
  1756 ;; This function calls:
  1757 ;;		_setDutyPWM1
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _initPWM1
  1765  0304                     _initPWM1:	
  1766                           
  1767                           ;main.c: 124: TRISB |= 1 << 3;
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in _initPWM1: [wreg+status,2+status,0+pclath+cstack]
  1771  0304  0021               	movlb	1	; select bank1
  1772  0305  158D               	bsf	13,3	;volatile
  1773                           
  1774                           ;main.c: 125: CCP1CON = 0b00001100;
  1775  0306  300C               	movlw	12
  1776  0307  0025               	movlb	5	; select bank5
  1777  0308  0093               	movwf	19	;volatile
  1778                           
  1779                           ;main.c: 126: setDutyPWM1(0);
  1780  0309  3000               	movlw	0
  1781  030A  0020               	movlb	0	; select bank0
  1782  030B  00A0               	movwf	setDutyPWM1@duty
  1783  030C  00A1               	movwf	setDutyPWM1@duty+1
  1784  030D  3181  21F2  3183   	fcall	_setDutyPWM1
  1785                           
  1786                           ;main.c: 127: CCPTMRS |= 0x02 << 0;
  1787  0310  0025               	movlb	5	; select bank5
  1788  0311  149E               	bsf	30,1	;volatile
  1789                           
  1790                           ;main.c: 128: TMR6IF = 0;
  1791  0312  0020               	movlb	0	; select bank0
  1792  0313  1193               	bcf	19,3	;volatile
  1793  0314                     l147:	
  1794                           ;main.c: 129: while(!TMR6IF);
  1795                           
  1796  0314  1D93               	btfss	19,3	;volatile
  1797  0315  2B14               	goto	l147
  1798                           
  1799                           ;main.c: 130: TRISB &= ~(1 << 3);
  1800  0316  30F7               	movlw	247
  1801  0317  00A4               	movwf	??_initPWM1
  1802  0318  0824               	movf	??_initPWM1,w
  1803  0319  0021               	movlb	1	; select bank1
  1804  031A  058D               	andwf	13,f	;volatile
  1805  031B  0008               	return
  1806  031C                     __end_of_initPWM1:	
  1807                           
  1808                           	psect	text14
  1809  01F2                     __ptext14:	
  1810 ;; *************** function _setDutyPWM1 *****************
  1811 ;; Defined at:
  1812 ;;		line 105 in file "main.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  duty            2    0[BANK0 ] unsigned int 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1826 ;;      Params:         0       2       0       0       0       0
  1827 ;;      Locals:         0       0       0       0       0       0
  1828 ;;      Temps:          0       2       0       0       0       0
  1829 ;;      Totals:         0       4       0       0       0       0
  1830 ;;Total ram usage:        4 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    3
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_initPWM1
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _setDutyPWM1
  1843  01F2                     _setDutyPWM1:	
  1844                           
  1845                           ;main.c: 112: if (duty > 0x03ff)
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _setDutyPWM1: [wreg+status,2+status,0]
  1849  01F2  3004               	movlw	4
  1850  01F3  0020               	movlb	0	; select bank0
  1851  01F4  0221               	subwf	setDutyPWM1@duty+1,w
  1852  01F5  3000               	movlw	0
  1853  01F6  1903               	skipnz
  1854  01F7  0220               	subwf	setDutyPWM1@duty,w
  1855  01F8  1C03               	skipc
  1856  01F9  29FE               	goto	l1044
  1857                           
  1858                           ;main.c: 113: duty = 0x03ff;
  1859  01FA  30FF               	movlw	255
  1860  01FB  00A0               	movwf	setDutyPWM1@duty
  1861  01FC  3003               	movlw	3
  1862  01FD  00A1               	movwf	setDutyPWM1@duty+1
  1863  01FE                     l1044:	
  1864                           
  1865                           ;main.c: 116: CCP1CON &= ~0b00110000;
  1866  01FE  30CF               	movlw	207
  1867  01FF  00A2               	movwf	??_setDutyPWM1
  1868  0200  0822               	movf	??_setDutyPWM1,w
  1869  0201  0025               	movlb	5	; select bank5
  1870  0202  0593               	andwf	19,f	;volatile
  1871                           
  1872                           ;main.c: 117: CCP1CON |= (duty & 0x02) << 4 ;
  1873  0203  0020               	movlb	0	; select bank0
  1874  0204  0820               	movf	setDutyPWM1@duty,w
  1875  0205  3902               	andlw	2
  1876  0206  00A2               	movwf	??_setDutyPWM1
  1877  0207  3003               	movlw	3
  1878  0208                     u415:	
  1879  0208  35A2               	lslf	??_setDutyPWM1,f
  1880  0209  3EFF               	addlw	-1
  1881  020A  1D03               	skipz
  1882  020B  2A08               	goto	u415
  1883  020C  3522               	lslf	??_setDutyPWM1,w
  1884  020D  00A3               	movwf	??_setDutyPWM1+1
  1885  020E  0823               	movf	??_setDutyPWM1+1,w
  1886  020F  0025               	movlb	5	; select bank5
  1887  0210  0493               	iorwf	19,f	;volatile
  1888                           
  1889                           ;main.c: 118: CCPR1L = (uint8_t) (duty >> 2);
  1890  0211  0020               	movlb	0	; select bank0
  1891  0212  0821               	movf	setDutyPWM1@duty+1,w
  1892  0213  00A3               	movwf	??_setDutyPWM1+1
  1893  0214  0820               	movf	setDutyPWM1@duty,w
  1894  0215  00A2               	movwf	??_setDutyPWM1
  1895  0216  36A3               	lsrf	??_setDutyPWM1+1,f
  1896  0217  0CA2               	rrf	??_setDutyPWM1,f
  1897  0218  36A3               	lsrf	??_setDutyPWM1+1,f
  1898  0219  0CA2               	rrf	??_setDutyPWM1,f
  1899  021A  0822               	movf	??_setDutyPWM1,w
  1900  021B  0025               	movlb	5	; select bank5
  1901  021C  0091               	movwf	17	;volatile
  1902  021D  0008               	return
  1903  021E                     __end_of_setDutyPWM1:	
  1904                           
  1905                           	psect	text15
  1906  03A2                     __ptext15:	
  1907 ;; *************** function _initInt *****************
  1908 ;; Defined at:
  1909 ;;		line 218 in file "main.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		None
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1923 ;;      Params:         0       0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    3
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function _initInt
  1939  03A2                     _initInt:	
  1940                           
  1941                           ;main.c: 219: TMR4IE = 1;
  1942                           
  1943                           ;incstack = 0
  1944                           ; Regs used in _initInt: []
  1945  03A2  0021               	movlb	1	; select bank1
  1946  03A3  1493               	bsf	19,1	;volatile
  1947                           
  1948                           ;main.c: 220: RCIE = 1;
  1949  03A4  1691               	bsf	17,5	;volatile
  1950                           
  1951                           ;main.c: 221: PEIE = 1;
  1952  03A5  170B               	bsf	11,6	;volatile
  1953                           
  1954                           ;main.c: 222: GIE = 1;
  1955  03A6  178B               	bsf	11,7	;volatile
  1956  03A7  0008               	return
  1957  03A8                     __end_of_initInt:	
  1958                           
  1959                           	psect	text16
  1960  039B                     __ptext16:	
  1961 ;; *************** function _initFrequency *****************
  1962 ;; Defined at:
  1963 ;;		line 17 in file "main.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		status,2
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1977 ;;      Params:         0       0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0       0
  1979 ;;      Temps:          0       0       0       0       0       0
  1980 ;;      Totals:         0       0       0       0       0       0
  1981 ;;Total ram usage:        0 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    3
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _initFrequency
  1993  039B                     _initFrequency:	
  1994                           
  1995                           ;main.c: 27: IRCF0 = 1;
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _initFrequency: [status,2]
  1999  039B  0021               	movlb	1	; select bank1
  2000  039C  1599               	bsf	25,3	;volatile
  2001                           
  2002                           ;main.c: 28: IRCF1 = 0;
  2003  039D  1219               	bcf	25,4	;volatile
  2004                           
  2005                           ;main.c: 29: IRCF2 = 1;
  2006  039E  1699               	bsf	25,5	;volatile
  2007                           
  2008                           ;main.c: 30: IRCF3 = 1;
  2009  039F  1719               	bsf	25,6	;volatile
  2010                           
  2011                           ;main.c: 32: OSCTUNE = 0b00000000;
  2012  03A0  0198               	clrf	24	;volatile
  2013  03A1  0008               	return
  2014  03A2                     __end_of_initFrequency:	
  2015                           
  2016                           	psect	text17
  2017  038A                     __ptext17:	
  2018 ;; *************** function _initADC *****************
  2019 ;; Defined at:
  2020 ;;		line 94 in file "main.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, status,2
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2034 ;;      Params:         0       0       0       0       0       0
  2035 ;;      Locals:         0       0       0       0       0       0
  2036 ;;      Temps:          0       0       0       0       0       0
  2037 ;;      Totals:         0       0       0       0       0       0
  2038 ;;Total ram usage:        0 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    3
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           
  2049                           ;psect for function _initADC
  2050  038A                     _initADC:	
  2051                           
  2052                           ;main.c: 95: ADCON0 = 0;
  2053                           
  2054                           ;incstack = 0
  2055                           ; Regs used in _initADC: [wreg+status,2]
  2056  038A  0021               	movlb	1	; select bank1
  2057  038B  019D               	clrf	29	;volatile
  2058                           
  2059                           ;main.c: 96: ADCON1 = 0;
  2060  038C  019E               	clrf	30	;volatile
  2061                           
  2062                           ;main.c: 98: ADCON0 |= 8 << 2;
  2063  038D  169D               	bsf	29,5	;volatile
  2064                           
  2065                           ;main.c: 99: ADCON1 |= 0 << 7;
  2066  038E  081E               	movf	30,w	;volatile
  2067                           
  2068                           ;main.c: 100: ADCON1 |= 000 << 4;
  2069  038F  081E               	movf	30,w	;volatile
  2070                           
  2071                           ;main.c: 101: ADCON1 |= 0 << 2;
  2072  0390  081E               	movf	30,w	;volatile
  2073                           
  2074                           ;main.c: 102: ADCON1 |= 0;
  2075  0391  081E               	movf	30,w	;volatile
  2076  0392  0008               	return
  2077  0393                     __end_of_initADC:	
  2078                           
  2079                           	psect	intentry
  2080  0004                     __pintentry:	
  2081 ;; *************** function _ISR *****************
  2082 ;; Defined at:
  2083 ;;		line 274 in file "main.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2097 ;;      Params:         0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0
  2099 ;;      Temps:          4       0       0       0       0       0
  2100 ;;      Totals:         4       0       0       0       0       0
  2101 ;;Total ram usage:        4 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    2
  2104 ;; This function calls:
  2105 ;;		_getData
  2106 ;;		_getPicAddr
  2107 ;;		_getSAddr
  2108 ;;		_setServo
  2109 ;; This function is called by:
  2110 ;;		Interrupt level 1
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114  0004                     _ISR:	
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2118  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2119  0005  3180               	pagesel	$
  2120  0006  0020               	movlb	0	; select bank0
  2121  0007  087F               	movf	127,w
  2122  0008  00FC               	movwf	??_ISR+3
  2123                           
  2124                           ;main.c: 278: if (RCIE && RCIF) {
  2125  0009  0021               	movlb	1	; select bank1
  2126  000A  1E91               	btfss	17,5	;volatile
  2127  000B  2864               	goto	i1l1294
  2128  000C  0020               	movlb	0	; select bank0
  2129  000D  1E91               	btfss	17,5	;volatile
  2130  000E  2864               	goto	i1l1294
  2131                           
  2132                           ;main.c: 282: if (dat0 == -1) {
  2133  000F  0A29               	incf	_dat0,w	;volatile
  2134  0010  1D03               	skipz
  2135  0011  2833               	goto	i1l1284
  2136  0012  0A2A               	incf	_dat0+1,w	;volatile
  2137  0013  1D03               	btfss	3,2
  2138  0014  2833               	goto	i1l1284
  2139                           
  2140                           ;main.c: 283: dat0 = RCREG;
  2141  0015  0023               	movlb	3	; select bank3
  2142  0016  0819               	movf	25,w	;volatile
  2143  0017  00F9               	movwf	??_ISR
  2144  0018  01FA               	clrf	??_ISR+1
  2145  0019  0879               	movf	??_ISR,w
  2146  001A  0020               	movlb	0	; select bank0
  2147  001B  00A9               	movwf	_dat0	;volatile
  2148  001C  087A               	movf	??_ISR+1,w
  2149  001D  00AA               	movwf	_dat0+1	;volatile
  2150                           
  2151                           ;main.c: 284: if (!(dat0 & 0b10000000)) {
  2152  001E  1BA9               	btfsc	_dat0,7	;volatile
  2153  001F  2822               	goto	i1l1280
  2154                           
  2155                           ;main.c: 285: dat0 = -1;
  2156  0020  30FF               	movlw	255
  2157  0021  282F               	goto	L3
  2158  0022                     i1l1280:	
  2159                           ;main.c: 286: } else if (getPicAddr((uint8_t) (dat0 & 0xff), (uint8_t) (dat1 & 0xff)) !=
      +                           1) {
  2160                           
  2161  0022  082B               	movf	_dat1,w	;volatile
  2162  0023  00F9               	movwf	??_ISR
  2163  0024  0879               	movf	??_ISR,w
  2164  0025  00F0               	movwf	getPicAddr@d1
  2165  0026  0829               	movf	_dat0,w	;volatile
  2166  0027  3183  2377  3180   	fcall	_getPicAddr
  2167  002A  3A01               	xorlw	1
  2168  002B  1903               	skipnz
  2169  002C  2862               	goto	i1l1292
  2170                           
  2171                           ;main.c: 287: dat0 = -1;
  2172  002D  30FF               	movlw	255
  2173  002E  0020               	movlb	0	; select bank0
  2174  002F                     L3:	
  2175  002F  00A9               	movwf	_dat0	;volatile
  2176  0030  30FF               	movlw	255
  2177  0031  00AA               	movwf	_dat0+1	;volatile
  2178                           
  2179                           ;main.c: 288: }
  2180                           ;main.c: 289: } else if (dat1 == -1) {
  2181  0032  2862               	goto	i1l1292
  2182  0033                     i1l1284:	
  2183  0033  0A2B               	incf	_dat1,w	;volatile
  2184  0034  1D03               	skipz
  2185  0035  2862               	goto	i1l1292
  2186  0036  0A2C               	incf	_dat1+1,w	;volatile
  2187  0037  1D03               	btfss	3,2
  2188  0038  2862               	goto	i1l1292
  2189                           
  2190                           ;main.c: 290: dat1 = RCREG;
  2191  0039  0023               	movlb	3	; select bank3
  2192  003A  0819               	movf	25,w	;volatile
  2193  003B  00F9               	movwf	??_ISR
  2194  003C  01FA               	clrf	??_ISR+1
  2195  003D  0879               	movf	??_ISR,w
  2196  003E  0020               	movlb	0	; select bank0
  2197  003F  00AB               	movwf	_dat1	;volatile
  2198  0040  087A               	movf	??_ISR+1,w
  2199  0041  00AC               	movwf	_dat1+1	;volatile
  2200                           
  2201                           ;main.c: 291: setServo(getSAddr((uint8_t) (dat0 & 0xff), (uint8_t) (dat1 & 0xff)), getDa
      +                          ta((uint8_t) (dat0 & 0xff), (uint8_t) (dat1 & 0xff)));
  2202  0042  082B               	movf	_dat1,w	;volatile
  2203  0043  00F9               	movwf	??_ISR
  2204  0044  0879               	movf	??_ISR,w
  2205  0045  00F0               	movwf	getData@d1
  2206  0046  0829               	movf	_dat0,w	;volatile
  2207  0047  3183  231C  3180   	fcall	_getData
  2208  004A  00FA               	movwf	??_ISR+1
  2209  004B  087A               	movf	??_ISR+1,w
  2210  004C  00F5               	movwf	setServo@val
  2211  004D  0020               	movlb	0	; select bank0
  2212  004E  082B               	movf	_dat1,w	;volatile
  2213  004F  00FB               	movwf	??_ISR+2
  2214  0050  087B               	movf	??_ISR+2,w
  2215  0051  00F0               	movwf	getSAddr@d1
  2216  0052  0829               	movf	_dat0,w	;volatile
  2217  0053  3183  236D  3180   	fcall	_getSAddr
  2218  0056  3181  2135  3180   	fcall	_setServo
  2219                           
  2220                           ;main.c: 292: dat0 = dat1 = -1;
  2221  0059  30FF               	movlw	255
  2222  005A  0020               	movlb	0	; select bank0
  2223  005B  00AB               	movwf	_dat1	;volatile
  2224  005C  30FF               	movlw	255
  2225  005D  00AC               	movwf	_dat1+1	;volatile
  2226  005E  082C               	movf	_dat1+1,w	;volatile
  2227  005F  00AA               	movwf	_dat0+1	;volatile
  2228  0060  082B               	movf	_dat1,w	;volatile
  2229  0061  00A9               	movwf	_dat0	;volatile
  2230  0062                     i1l1292:	
  2231                           
  2232                           ;main.c: 293: }
  2233                           ;main.c: 294: RCIF = 0;
  2234  0062  0020               	movlb	0	; select bank0
  2235  0063  1291               	bcf	17,5	;volatile
  2236  0064                     i1l1294:	
  2237                           
  2238                           ;main.c: 295: }
  2239                           ;main.c: 296: if (TMR4IF) {
  2240  0064  0020               	movlb	0	; select bank0
  2241  0065  1C93               	btfss	19,1	;volatile
  2242  0066  2870               	goto	i1l227
  2243                           
  2244                           ;main.c: 300: cycle_adc++;
  2245  0067  3001               	movlw	1
  2246  0068  00F9               	movwf	??_ISR
  2247  0069  0879               	movf	??_ISR,w
  2248  006A  07AD               	addwf	_cycle_adc,f	;volatile
  2249                           
  2250                           ;main.c: 301: cycle_timeout++;
  2251  006B  3001               	movlw	1
  2252  006C  00F9               	movwf	??_ISR
  2253  006D  0879               	movf	??_ISR,w
  2254  006E  07AE               	addwf	_cycle_timeout,f	;volatile
  2255                           
  2256                           ;main.c: 302: TMR4IF = 0;
  2257  006F  1093               	bcf	19,1	;volatile
  2258  0070                     i1l227:	
  2259  0070  087C               	movf	??_ISR+3,w
  2260  0071  00FF               	movwf	127
  2261  0072  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2262  0073  0009               	retfie
  2263  0074                     __end_of_ISR:	
  2264                           
  2265                           	psect	text19
  2266  0135                     __ptext19:	
  2267 ;; *************** function _setServo *****************
  2268 ;; Defined at:
  2269 ;;		line 257 in file "main.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  id              1    wreg     unsigned char 
  2272 ;;  val             1    5[COMMON] unsigned char 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  id              1    8[COMMON] unsigned char 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      void 
  2277 ;; Registers used:
  2278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2284 ;;      Params:         1       0       0       0       0       0
  2285 ;;      Locals:         1       0       0       0       0       0
  2286 ;;      Temps:          2       0       0       0       0       0
  2287 ;;      Totals:         4       0       0       0       0       0
  2288 ;;Total ram usage:        4 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    1
  2291 ;; This function calls:
  2292 ;;		i1_setDutyPWM1
  2293 ;;		i1_setDutyPWM2
  2294 ;;		i1_setDutyPWM3
  2295 ;;		i1_setDutyPWM4
  2296 ;; This function is called by:
  2297 ;;		_ISR
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _setServo
  2303  0135                     _setServo:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _setServo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2307                           ;setServo@id stored from wreg
  2308  0135  00F8               	movwf	setServo@id
  2309                           
  2310                           ;main.c: 258: switch (id) {
  2311  0136  295F               	goto	i1l1258
  2312  0137                     i1l1248:	
  2313                           ;main.c: 259: case 0:
  2314                           
  2315                           
  2316                           ;main.c: 260: setDutyPWM1(val);
  2317  0137  0875               	movf	setServo@val,w
  2318  0138  00F6               	movwf	??_setServo
  2319  0139  01F7               	clrf	??_setServo+1
  2320  013A  0876               	movf	??_setServo,w
  2321  013B  00F0               	movwf	i1setDutyPWM1@duty
  2322  013C  0877               	movf	??_setServo+1,w
  2323  013D  00F1               	movwf	i1setDutyPWM1@duty+1
  2324  013E  3182  2293         	fcall	i1_setDutyPWM1
  2325                           
  2326                           ;main.c: 261: break;
  2327  0140  0008               	return
  2328  0141                     i1l1250:	
  2329                           ;main.c: 262: case 1:
  2330                           
  2331                           
  2332                           ;main.c: 263: setDutyPWM2(val);
  2333  0141  0875               	movf	setServo@val,w
  2334  0142  00F6               	movwf	??_setServo
  2335  0143  01F7               	clrf	??_setServo+1
  2336  0144  0876               	movf	??_setServo,w
  2337  0145  00F0               	movwf	i1setDutyPWM2@duty
  2338  0146  0877               	movf	??_setServo+1,w
  2339  0147  00F1               	movwf	i1setDutyPWM2@duty+1
  2340  0148  3182  226C         	fcall	i1_setDutyPWM2
  2341                           
  2342                           ;main.c: 264: break;
  2343  014A  0008               	return
  2344  014B                     i1l1252:	
  2345                           ;main.c: 265: case 2:
  2346                           
  2347                           
  2348                           ;main.c: 266: setDutyPWM3(val);
  2349  014B  0875               	movf	setServo@val,w
  2350  014C  00F6               	movwf	??_setServo
  2351  014D  01F7               	clrf	??_setServo+1
  2352  014E  0876               	movf	??_setServo,w
  2353  014F  00F0               	movwf	i1setDutyPWM3@duty
  2354  0150  0877               	movf	??_setServo+1,w
  2355  0151  00F1               	movwf	i1setDutyPWM3@duty+1
  2356  0152  3182  2245         	fcall	i1_setDutyPWM3
  2357                           
  2358                           ;main.c: 267: break;
  2359  0154  0008               	return
  2360  0155                     i1l1254:	
  2361                           ;main.c: 268: case 3:
  2362                           
  2363                           
  2364                           ;main.c: 269: setDutyPWM4(val);
  2365  0155  0875               	movf	setServo@val,w
  2366  0156  00F6               	movwf	??_setServo
  2367  0157  01F7               	clrf	??_setServo+1
  2368  0158  0876               	movf	??_setServo,w
  2369  0159  00F0               	movwf	i1setDutyPWM4@duty
  2370  015A  0877               	movf	??_setServo+1,w
  2371  015B  00F1               	movwf	i1setDutyPWM4@duty+1
  2372  015C  3182  221E         	fcall	i1_setDutyPWM4
  2373                           
  2374                           ;main.c: 271: }
  2375                           
  2376                           ;main.c: 270: break;
  2377  015E  0008               	return
  2378  015F                     i1l1258:	
  2379  015F  0878               	movf	setServo@id,w
  2380                           
  2381                           ; Switch size 1, requested type "space"
  2382                           ; Number of cases is 4, Range of values is 0 to 3
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte           13     7 (average)
  2386                           ; direct_byte           14     6 (fixed)
  2387                           ; jumptable            260     6 (fixed)
  2388                           ;	Chosen strategy is simple_byte
  2389  0160  3A00               	xorlw	0	; case 0
  2390  0161  1903               	skipnz
  2391  0162  2937               	goto	i1l1248
  2392  0163  3A01               	xorlw	1	; case 1
  2393  0164  1903               	skipnz
  2394  0165  2941               	goto	i1l1250
  2395  0166  3A03               	xorlw	3	; case 2
  2396  0167  1903               	skipnz
  2397  0168  294B               	goto	i1l1252
  2398  0169  3A01               	xorlw	1	; case 3
  2399  016A  1903               	skipnz
  2400  016B  2955               	goto	i1l1254
  2401  016C  296D               	goto	i1l216
  2402  016D                     i1l216:	
  2403  016D  0008               	return
  2404  016E                     __end_of_setServo:	
  2405                           
  2406                           	psect	text20
  2407  021E                     __ptext20:	
  2408 ;; *************** function i1_setDutyPWM4 *****************
  2409 ;; Defined at:
  2410 ;;		line 190 in file "main.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  duty            2    0[COMMON] unsigned int 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;		None
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2424 ;;      Params:         2       0       0       0       0       0
  2425 ;;      Locals:         0       0       0       0       0       0
  2426 ;;      Temps:          2       0       0       0       0       0
  2427 ;;      Totals:         4       0       0       0       0       0
  2428 ;;Total ram usage:        4 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_setServo
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           
  2438                           ;psect for function i1_setDutyPWM4
  2439  021E                     i1_setDutyPWM4:	
  2440                           
  2441                           ;main.c: 197: if (duty > 0x03ff)
  2442                           
  2443                           ;incstack = 0
  2444                           ; Regs used in i1_setDutyPWM4: [wreg+status,2+status,0]
  2445  021E  3004               	movlw	4
  2446  021F  0271               	subwf	i1setDutyPWM4@duty+1,w
  2447  0220  3000               	movlw	0
  2448  0221  1903               	skipnz
  2449  0222  0270               	subwf	i1setDutyPWM4@duty,w
  2450  0223  1C03               	skipc
  2451  0224  2A29               	goto	i1l1104
  2452                           
  2453                           ;main.c: 198: duty = 0x03ff;
  2454  0225  30FF               	movlw	255
  2455  0226  00F0               	movwf	i1setDutyPWM4@duty
  2456  0227  3003               	movlw	3
  2457  0228  00F1               	movwf	i1setDutyPWM4@duty+1
  2458  0229                     i1l1104:	
  2459                           
  2460                           ;main.c: 201: CCP4CON &= ~0b00110000;
  2461  0229  30CF               	movlw	207
  2462  022A  00F2               	movwf	??i1_setDutyPWM4
  2463  022B  0872               	movf	??i1_setDutyPWM4,w
  2464  022C  0026               	movlb	6	; select bank6
  2465  022D  059A               	andwf	26,f	;volatile
  2466                           
  2467                           ;main.c: 202: CCP4CON |= (duty & 0x02) << 4 ;
  2468  022E  0870               	movf	i1setDutyPWM4@duty,w
  2469  022F  3902               	andlw	2
  2470  0230  00F2               	movwf	??i1_setDutyPWM4
  2471  0231  3003               	movlw	3
  2472  0232                     u53_25:	
  2473  0232  35F2               	lslf	??i1_setDutyPWM4,f
  2474  0233  3EFF               	addlw	-1
  2475  0234  1D03               	skipz
  2476  0235  2A32               	goto	u53_25
  2477  0236  3572               	lslf	??i1_setDutyPWM4,w
  2478  0237  00F3               	movwf	??i1_setDutyPWM4+1
  2479  0238  0873               	movf	??i1_setDutyPWM4+1,w
  2480  0239  049A               	iorwf	26,f	;volatile
  2481                           
  2482                           ;main.c: 203: CCPR4L = (uint8_t) (duty >> 2);
  2483  023A  0871               	movf	i1setDutyPWM4@duty+1,w
  2484  023B  00F3               	movwf	??i1_setDutyPWM4+1
  2485  023C  0870               	movf	i1setDutyPWM4@duty,w
  2486  023D  00F2               	movwf	??i1_setDutyPWM4
  2487  023E  36F3               	lsrf	??i1_setDutyPWM4+1,f
  2488  023F  0CF2               	rrf	??i1_setDutyPWM4,f
  2489  0240  36F3               	lsrf	??i1_setDutyPWM4+1,f
  2490  0241  0CF2               	rrf	??i1_setDutyPWM4,f
  2491  0242  0872               	movf	??i1_setDutyPWM4,w
  2492  0243  0098               	movwf	24	;volatile
  2493  0244  0008               	return
  2494  0245                     __end_ofi1_setDutyPWM4:	
  2495                           
  2496                           	psect	text21
  2497  0245                     __ptext21:	
  2498 ;; *************** function i1_setDutyPWM3 *****************
  2499 ;; Defined at:
  2500 ;;		line 162 in file "main.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  duty            2    0[COMMON] unsigned int 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2514 ;;      Params:         2       0       0       0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0
  2516 ;;      Temps:          2       0       0       0       0       0
  2517 ;;      Totals:         4       0       0       0       0       0
  2518 ;;Total ram usage:        4 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_setServo
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function i1_setDutyPWM3
  2529  0245                     i1_setDutyPWM3:	
  2530                           
  2531                           ;main.c: 169: if (duty > 0x03ff)
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in i1_setDutyPWM3: [wreg+status,2+status,0]
  2535  0245  3004               	movlw	4
  2536  0246  0271               	subwf	i1setDutyPWM3@duty+1,w
  2537  0247  3000               	movlw	0
  2538  0248  1903               	skipnz
  2539  0249  0270               	subwf	i1setDutyPWM3@duty,w
  2540  024A  1C03               	skipc
  2541  024B  2A50               	goto	i1l1094
  2542                           
  2543                           ;main.c: 170: duty = 0x03ff;
  2544  024C  30FF               	movlw	255
  2545  024D  00F0               	movwf	i1setDutyPWM3@duty
  2546  024E  3003               	movlw	3
  2547  024F  00F1               	movwf	i1setDutyPWM3@duty+1
  2548  0250                     i1l1094:	
  2549                           
  2550                           ;main.c: 173: CCP3CON &= ~0b00110000;
  2551  0250  30CF               	movlw	207
  2552  0251  00F2               	movwf	??i1_setDutyPWM3
  2553  0252  0872               	movf	??i1_setDutyPWM3,w
  2554  0253  0026               	movlb	6	; select bank6
  2555  0254  0593               	andwf	19,f	;volatile
  2556                           
  2557                           ;main.c: 174: CCP3CON |= (duty & 0x02) << 4 ;
  2558  0255  0870               	movf	i1setDutyPWM3@duty,w
  2559  0256  3902               	andlw	2
  2560  0257  00F2               	movwf	??i1_setDutyPWM3
  2561  0258  3003               	movlw	3
  2562  0259                     u51_25:	
  2563  0259  35F2               	lslf	??i1_setDutyPWM3,f
  2564  025A  3EFF               	addlw	-1
  2565  025B  1D03               	skipz
  2566  025C  2A59               	goto	u51_25
  2567  025D  3572               	lslf	??i1_setDutyPWM3,w
  2568  025E  00F3               	movwf	??i1_setDutyPWM3+1
  2569  025F  0873               	movf	??i1_setDutyPWM3+1,w
  2570  0260  0493               	iorwf	19,f	;volatile
  2571                           
  2572                           ;main.c: 175: CCPR3L = (uint8_t) (duty >> 2);
  2573  0261  0871               	movf	i1setDutyPWM3@duty+1,w
  2574  0262  00F3               	movwf	??i1_setDutyPWM3+1
  2575  0263  0870               	movf	i1setDutyPWM3@duty,w
  2576  0264  00F2               	movwf	??i1_setDutyPWM3
  2577  0265  36F3               	lsrf	??i1_setDutyPWM3+1,f
  2578  0266  0CF2               	rrf	??i1_setDutyPWM3,f
  2579  0267  36F3               	lsrf	??i1_setDutyPWM3+1,f
  2580  0268  0CF2               	rrf	??i1_setDutyPWM3,f
  2581  0269  0872               	movf	??i1_setDutyPWM3,w
  2582  026A  0091               	movwf	17	;volatile
  2583  026B  0008               	return
  2584  026C                     __end_ofi1_setDutyPWM3:	
  2585                           
  2586                           	psect	text22
  2587  026C                     __ptext22:	
  2588 ;; *************** function i1_setDutyPWM2 *****************
  2589 ;; Defined at:
  2590 ;;		line 133 in file "main.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  duty            2    0[COMMON] unsigned int 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2604 ;;      Params:         2       0       0       0       0       0
  2605 ;;      Locals:         0       0       0       0       0       0
  2606 ;;      Temps:          2       0       0       0       0       0
  2607 ;;      Totals:         4       0       0       0       0       0
  2608 ;;Total ram usage:        4 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_setServo
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function i1_setDutyPWM2
  2619  026C                     i1_setDutyPWM2:	
  2620                           
  2621                           ;main.c: 140: if (duty > 0x03ff)
  2622                           
  2623                           ;incstack = 0
  2624                           ; Regs used in i1_setDutyPWM2: [wreg+status,2+status,0]
  2625  026C  3004               	movlw	4
  2626  026D  0271               	subwf	i1setDutyPWM2@duty+1,w
  2627  026E  3000               	movlw	0
  2628  026F  1903               	skipnz
  2629  0270  0270               	subwf	i1setDutyPWM2@duty,w
  2630  0271  1C03               	skipc
  2631  0272  2A77               	goto	i1l1084
  2632                           
  2633                           ;main.c: 141: duty = 0x03ff;
  2634  0273  30FF               	movlw	255
  2635  0274  00F0               	movwf	i1setDutyPWM2@duty
  2636  0275  3003               	movlw	3
  2637  0276  00F1               	movwf	i1setDutyPWM2@duty+1
  2638  0277                     i1l1084:	
  2639                           
  2640                           ;main.c: 144: CCP2CON &= ~0b00110000;
  2641  0277  30CF               	movlw	207
  2642  0278  00F2               	movwf	??i1_setDutyPWM2
  2643  0279  0872               	movf	??i1_setDutyPWM2,w
  2644  027A  0025               	movlb	5	; select bank5
  2645  027B  059A               	andwf	26,f	;volatile
  2646                           
  2647                           ;main.c: 145: CCP2CON |= (duty & 0x02) << 4 ;
  2648  027C  0870               	movf	i1setDutyPWM2@duty,w
  2649  027D  3902               	andlw	2
  2650  027E  00F2               	movwf	??i1_setDutyPWM2
  2651  027F  3003               	movlw	3
  2652  0280                     u49_25:	
  2653  0280  35F2               	lslf	??i1_setDutyPWM2,f
  2654  0281  3EFF               	addlw	-1
  2655  0282  1D03               	skipz
  2656  0283  2A80               	goto	u49_25
  2657  0284  3572               	lslf	??i1_setDutyPWM2,w
  2658  0285  00F3               	movwf	??i1_setDutyPWM2+1
  2659  0286  0873               	movf	??i1_setDutyPWM2+1,w
  2660  0287  049A               	iorwf	26,f	;volatile
  2661                           
  2662                           ;main.c: 146: CCPR2L = (uint8_t) (duty >> 2);
  2663  0288  0871               	movf	i1setDutyPWM2@duty+1,w
  2664  0289  00F3               	movwf	??i1_setDutyPWM2+1
  2665  028A  0870               	movf	i1setDutyPWM2@duty,w
  2666  028B  00F2               	movwf	??i1_setDutyPWM2
  2667  028C  36F3               	lsrf	??i1_setDutyPWM2+1,f
  2668  028D  0CF2               	rrf	??i1_setDutyPWM2,f
  2669  028E  36F3               	lsrf	??i1_setDutyPWM2+1,f
  2670  028F  0CF2               	rrf	??i1_setDutyPWM2,f
  2671  0290  0872               	movf	??i1_setDutyPWM2,w
  2672  0291  0098               	movwf	24	;volatile
  2673  0292  0008               	return
  2674  0293                     __end_ofi1_setDutyPWM2:	
  2675                           
  2676                           	psect	text23
  2677  0293                     __ptext23:	
  2678 ;; *************** function i1_setDutyPWM1 *****************
  2679 ;; Defined at:
  2680 ;;		line 105 in file "main.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;  duty            2    0[COMMON] unsigned int 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2694 ;;      Params:         2       0       0       0       0       0
  2695 ;;      Locals:         0       0       0       0       0       0
  2696 ;;      Temps:          2       0       0       0       0       0
  2697 ;;      Totals:         4       0       0       0       0       0
  2698 ;;Total ram usage:        4 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_setServo
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function i1_setDutyPWM1
  2709  0293                     i1_setDutyPWM1:	
  2710                           
  2711                           ;main.c: 112: if (duty > 0x03ff)
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in i1_setDutyPWM1: [wreg+status,2+status,0]
  2715  0293  3004               	movlw	4
  2716  0294  0271               	subwf	i1setDutyPWM1@duty+1,w
  2717  0295  3000               	movlw	0
  2718  0296  1903               	skipnz
  2719  0297  0270               	subwf	i1setDutyPWM1@duty,w
  2720  0298  1C03               	skipc
  2721  0299  2A9E               	goto	i1l1074
  2722                           
  2723                           ;main.c: 113: duty = 0x03ff;
  2724  029A  30FF               	movlw	255
  2725  029B  00F0               	movwf	i1setDutyPWM1@duty
  2726  029C  3003               	movlw	3
  2727  029D  00F1               	movwf	i1setDutyPWM1@duty+1
  2728  029E                     i1l1074:	
  2729                           
  2730                           ;main.c: 116: CCP1CON &= ~0b00110000;
  2731  029E  30CF               	movlw	207
  2732  029F  00F2               	movwf	??i1_setDutyPWM1
  2733  02A0  0872               	movf	??i1_setDutyPWM1,w
  2734  02A1  0025               	movlb	5	; select bank5
  2735  02A2  0593               	andwf	19,f	;volatile
  2736                           
  2737                           ;main.c: 117: CCP1CON |= (duty & 0x02) << 4 ;
  2738  02A3  0870               	movf	i1setDutyPWM1@duty,w
  2739  02A4  3902               	andlw	2
  2740  02A5  00F2               	movwf	??i1_setDutyPWM1
  2741  02A6  3003               	movlw	3
  2742  02A7                     u47_25:	
  2743  02A7  35F2               	lslf	??i1_setDutyPWM1,f
  2744  02A8  3EFF               	addlw	-1
  2745  02A9  1D03               	skipz
  2746  02AA  2AA7               	goto	u47_25
  2747  02AB  3572               	lslf	??i1_setDutyPWM1,w
  2748  02AC  00F3               	movwf	??i1_setDutyPWM1+1
  2749  02AD  0873               	movf	??i1_setDutyPWM1+1,w
  2750  02AE  0493               	iorwf	19,f	;volatile
  2751                           
  2752                           ;main.c: 118: CCPR1L = (uint8_t) (duty >> 2);
  2753  02AF  0871               	movf	i1setDutyPWM1@duty+1,w
  2754  02B0  00F3               	movwf	??i1_setDutyPWM1+1
  2755  02B1  0870               	movf	i1setDutyPWM1@duty,w
  2756  02B2  00F2               	movwf	??i1_setDutyPWM1
  2757  02B3  36F3               	lsrf	??i1_setDutyPWM1+1,f
  2758  02B4  0CF2               	rrf	??i1_setDutyPWM1,f
  2759  02B5  36F3               	lsrf	??i1_setDutyPWM1+1,f
  2760  02B6  0CF2               	rrf	??i1_setDutyPWM1,f
  2761  02B7  0872               	movf	??i1_setDutyPWM1,w
  2762  02B8  0091               	movwf	17	;volatile
  2763  02B9  0008               	return
  2764  02BA                     __end_ofi1_setDutyPWM1:	
  2765                           
  2766                           	psect	text24
  2767  036D                     __ptext24:	
  2768 ;; *************** function _getSAddr *****************
  2769 ;; Defined at:
  2770 ;;		line 242 in file "main.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  d0              1    wreg     unsigned char 
  2773 ;;  d1              1    0[COMMON] unsigned char 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  d0              1    2[COMMON] unsigned char 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      unsigned char 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2785 ;;      Params:         1       0       0       0       0       0
  2786 ;;      Locals:         1       0       0       0       0       0
  2787 ;;      Temps:          1       0       0       0       0       0
  2788 ;;      Totals:         3       0       0       0       0       0
  2789 ;;Total ram usage:        3 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_ISR
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           
  2799                           ;psect for function _getSAddr
  2800  036D                     _getSAddr:	
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _getSAddr: [wreg+status,2+status,0]
  2804                           ;getSAddr@d0 stored from wreg
  2805  036D  00F2               	movwf	getSAddr@d0
  2806                           
  2807                           ;main.c: 243: return (d0 >> 3) & 0b00000011;
  2808  036E  0872               	movf	getSAddr@d0,w
  2809  036F  00F1               	movwf	??_getSAddr
  2810  0370  3003               	movlw	3
  2811  0371                     u63_25:	
  2812  0371  36F1               	lsrf	??_getSAddr,f
  2813  0372  0B89               	decfsz	9,f
  2814  0373  2B71               	goto	u63_25
  2815  0374  0871               	movf	??_getSAddr,w
  2816  0375  3903               	andlw	3
  2817  0376  0008               	return
  2818  0377                     __end_of_getSAddr:	
  2819                           
  2820                           	psect	text25
  2821  0377                     __ptext25:	
  2822 ;; *************** function _getPicAddr *****************
  2823 ;; Defined at:
  2824 ;;		line 238 in file "main.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  d0              1    wreg     unsigned char 
  2827 ;;  d1              1    0[COMMON] unsigned char 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  d0              1    2[COMMON] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      unsigned char 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2839 ;;      Params:         1       0       0       0       0       0
  2840 ;;      Locals:         1       0       0       0       0       0
  2841 ;;      Temps:          1       0       0       0       0       0
  2842 ;;      Totals:         3       0       0       0       0       0
  2843 ;;Total ram usage:        3 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_ISR
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           
  2853                           ;psect for function _getPicAddr
  2854  0377                     _getPicAddr:	
  2855                           
  2856                           ;incstack = 0
  2857                           ; Regs used in _getPicAddr: [wreg+status,2+status,0]
  2858                           ;getPicAddr@d0 stored from wreg
  2859  0377  00F2               	movwf	getPicAddr@d0
  2860                           
  2861                           ;main.c: 239: return (d0 >> 5) & 0b00000011;
  2862  0378  0872               	movf	getPicAddr@d0,w
  2863  0379  00F1               	movwf	??_getPicAddr
  2864  037A  3005               	movlw	5
  2865  037B                     u62_25:	
  2866  037B  36F1               	lsrf	??_getPicAddr,f
  2867  037C  0B89               	decfsz	9,f
  2868  037D  2B7B               	goto	u62_25
  2869  037E  0871               	movf	??_getPicAddr,w
  2870  037F  3903               	andlw	3
  2871  0380  0008               	return
  2872  0381                     __end_of_getPicAddr:	
  2873                           
  2874                           	psect	text26
  2875  031C                     __ptext26:	
  2876 ;; *************** function _getData *****************
  2877 ;; Defined at:
  2878 ;;		line 250 in file "main.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  d0              1    wreg     unsigned char 
  2881 ;;  d1              1    0[COMMON] unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  d0              1    3[COMMON] unsigned char 
  2884 ;;  ret             1    4[COMMON] unsigned char 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      unsigned char 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2894 ;;      Params:         1       0       0       0       0       0
  2895 ;;      Locals:         2       0       0       0       0       0
  2896 ;;      Temps:          2       0       0       0       0       0
  2897 ;;      Totals:         5       0       0       0       0       0
  2898 ;;Total ram usage:        5 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_ISR
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function _getData
  2909  031C                     _getData:	
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _getData: [wreg+status,2+status,0]
  2913                           ;getData@d0 stored from wreg
  2914  031C  00F3               	movwf	getData@d0
  2915                           
  2916                           ;main.c: 251: uint8_t ret = 0;
  2917  031D  01F4               	clrf	getData@ret
  2918                           
  2919                           ;main.c: 252: ret |= (d0 & 0b00000001) << 7;
  2920  031E  0873               	movf	getData@d0,w
  2921  031F  3901               	andlw	1
  2922  0320  00F1               	movwf	??_getData
  2923  0321  3006               	movlw	6
  2924  0322                     u64_25:	
  2925  0322  35F1               	lslf	??_getData,f
  2926  0323  3EFF               	addlw	-1
  2927  0324  1D03               	skipz
  2928  0325  2B22               	goto	u64_25
  2929  0326  3571               	lslf	??_getData,w
  2930  0327  00F2               	movwf	??_getData+1
  2931  0328  0872               	movf	??_getData+1,w
  2932  0329  04F4               	iorwf	getData@ret,f
  2933                           
  2934                           ;main.c: 253: ret |= (d1 & 0b01111111);
  2935  032A  0870               	movf	getData@d1,w
  2936  032B  397F               	andlw	127
  2937  032C  00F1               	movwf	??_getData
  2938  032D  0871               	movf	??_getData,w
  2939  032E  04F4               	iorwf	getData@ret,f
  2940                           
  2941                           ;main.c: 254: return ret;
  2942  032F  0874               	movf	getData@ret,w
  2943  0330  0008               	return
  2944  0331                     __end_of_getData:	
  2945  007E                     btemp	set	126	;btemp
  2946  007E                     int$flags	set	126
  2947  007E                     wtemp	set	126
  2948  007E                     wtemp0	set	126
  2949  0080                     wtemp1	set	128
  2950  0082                     wtemp2	set	130
  2951  0084                     wtemp3	set	132
  2952  0086                     wtemp4	set	134
  2953  0088                     wtemp5	set	136
  2954  007F                     wtemp6	set	127
  2955  007E                     ttemp	set	126
  2956  007E                     ttemp0	set	126
  2957  0081                     ttemp1	set	129
  2958  0084                     ttemp2	set	132
  2959  0087                     ttemp3	set	135
  2960  007F                     ttemp4	set	127
  2961  007E                     ltemp	set	126
  2962  007E                     ltemp0	set	126
  2963  0082                     ltemp1	set	130
  2964  0086                     ltemp2	set	134
  2965  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      15
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_setServo
    _setServo->_getData

Critical Paths under _main in BANK0

    _main->_initPWM1
    _main->_initPWM2
    _main->_initPWM3
    _main->_initPWM4
    _initPWM4->_setDutyPWM3
    _initPWM3->_setDutyPWM3
    _initPWM2->_setDutyPWM2
    _initPWM1->_setDutyPWM1

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2291
                                              5 BANK0      4     4      0
                            _initADC
                      _initFrequency
                            _initInt
                           _initPWM1
                           _initPWM2
                           _initPWM3
                           _initPWM4
                      _initRegisters
                           _initTMR4
                           _initTMR6
                           _initUART
                      _initVariables
                               _putc
                        _setDutyPWM1
                        _setDutyPWM2
                        _setDutyPWM3
                        _setDutyPWM4
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM4                                          4     2      2     200
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _putc                                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR6                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR4                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRegisters                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM4                                             1     1      0     306
                                              4 BANK0      1     1      0
                        _setDutyPWM3
 ---------------------------------------------------------------------------------
 (1) _initPWM3                                             1     1      0     306
                                              4 BANK0      1     1      0
                        _setDutyPWM3
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM3                                          4     2      2     306
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initPWM2                                             1     1      0     253
                                              4 BANK0      1     1      0
                        _setDutyPWM2
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM2                                          4     2      2     253
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initPWM1                                             1     1      0     253
                                              4 BANK0      1     1      0
                        _setDutyPWM1
 ---------------------------------------------------------------------------------
 (1) _setDutyPWM1                                          4     2      2     253
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initFrequency                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     807
                                              9 COMMON     4     4      0
                            _getData
                         _getPicAddr
                           _getSAddr
                           _setServo
 ---------------------------------------------------------------------------------
 (4) _setServo                                             4     3      1     535
                                              5 COMMON     4     3      1
                            _getData (ARG)
                           _getSAddr (ARG)
                      i1_setDutyPWM1
                      i1_setDutyPWM2
                      i1_setDutyPWM3
                      i1_setDutyPWM4
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM4                                        4     2      2      93
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM3                                        4     2      2      93
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM2                                        4     2      2      93
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) i1_setDutyPWM1                                        4     2      2      93
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _getSAddr                                             3     2      1      75
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getPicAddr                                           3     2      1      75
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getData                                              5     4      1     122
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initADC
   _initFrequency
   _initInt
   _initPWM1
     _setDutyPWM1
   _initPWM2
     _setDutyPWM2
   _initPWM3
     _setDutyPWM3
   _initPWM4
     _setDutyPWM3
   _initRegisters
   _initTMR4
   _initTMR6
   _initUART
   _initVariables
   _putc
   _setDutyPWM1
   _setDutyPWM2
   _setDutyPWM3
   _setDutyPWM4

 _ISR (ROOT)
   _getData
   _getPicAddr
   _getSAddr
   _setServo
     _getData (ARG)
     _getSAddr (ARG)
     i1_setDutyPWM1 (ARG)
     i1_setDutyPWM2 (ARG)
     i1_setDutyPWM3 (ARG)
     i1_setDutyPWM4 (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9       F       6       18.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      1C      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Mar 10 13:30:01 2017

            __CFG_CP$OFF 0000                      l232 00CF                      l147 0314  
                    l157 02CC                      l167 02FC                      l177 02E4  
                    l186 0364                      _GIE 005F                      u415 0208  
                    _PR4 0416             __CFG_CPD$OFF 0000                      _PR6 041D  
                    u435 01DC                      _ISR 0004                      u455 01B0  
                    u595 0184                      u755 00E0                      u797 00C8  
           __CFG_BORV$LO 0000                      wreg 0009              main@adc_val 0027  
           __CFG_LVP$OFF 0000                     ?_ISR 0070                     l1202 017A  
                   l1044 01FE                     l1054 01D2                     l1064 01A6  
                   l1136 0350                     l1330 00BC                     l1350 00EE  
                   l1360 0102                     l1370 0114                     _ADON 04E8  
                   _BRGH 0CF2                     _CREN 0CEC                     _PEIE 005E  
                   _RCIE 048D                     _RCIF 008D                     _TMR4 0415  
                   _SPEN 0CEF                     _TRMT 0CF1                     _TXEN 0CF5  
                   _SYNC 0CF4                     _WPUB 020D             __CFG_WRT$OFF 0000  
                   _dat0 0029                     _dat1 002B                     _main 007C  
                   _putc 0362                     btemp 007E                     ltemp 007E  
                   start 0074                     ttemp 007E                     wtemp 007E  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_ISR 0079  
          __CFG_PLLEN$ON 0000                    ?_main 0070                    _BRG16 0CFB  
          __CFG_WDTE$OFF 0000                    ?_putc 0070                    _T4CON 0417  
                  _T6CON 041E                    _IRCF0 04CB                    _IRCF1 04CC  
                  _IRCF2 04CD                    _IRCF3 04CE                    i1l216 016D  
                  i1l227 0070                    _RCREG 0199                    _SPBRG 019B  
                  _PORTA 000C                    _PORTB 000D                    u51_25 0259  
                  u53_25 0232                    u62_25 037B                    u63_25 0371  
                  u47_25 02A7                    u64_25 0322                    _TRISA 008C  
                  _TRISB 008D                    u49_25 0280                    _TXREG 019A  
        __end_of_getData 0331           __CFG_FCMEN$OFF 0000          __end_of_initADC 0393  
        __end_of_initInt 03A8           __CFG_BOREN$OFF 0000                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  putc@c 0020            _cycle_timeout 002E                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
 __size_of_initFrequency 0007          __initialization 0076             __end_of_main 0135  
           __end_of_putc 036D   __size_of_initRegisters 0013                   ??_main 0025  
                 ??_putc 0020             ?_setDutyPWM1 0020             ?_setDutyPWM2 0020  
           ?_setDutyPWM3 0020             ?_setDutyPWM4 0020   __size_of_initVariables 000C  
                 _ADCON0 009D                   _ADCON1 009E                   _ADRESH 009C  
                 _CCPR1L 0291                   _CCPR2L 0298                   _CCPR3L 0311  
                 _CCPR4L 0318                   _ANSELA 018C                   _ANSELB 018D  
      i1setDutyPWM1@duty 0070        i1setDutyPWM2@duty 0070        i1setDutyPWM3@duty 0070  
      i1setDutyPWM4@duty 0070                   i1l1104 0229                   i1l1074 029E  
                 i1l1250 0141                   i1l1084 0277                   i1l1252 014B  
                 i1l1094 0250                   i1l1254 0155                   i1l1248 0137  
                 i1l1280 0022                   i1l1258 015F                   i1l1292 0062  
                 i1l1284 0033                   i1l1294 0064                   _TMR4IE 0499  
                 _TMR4IF 0099                   _TMR6IF 009B         __end_of_getSAddr 0377  
         __CFG_PWRTE$OFF 0000                   _nWPUEN 04AF         __end_of_initUART 0356  
       __end_of_initPWM1 031C         __end_of_initPWM2 02D4         __end_of_initPWM3 0304  
       __end_of_initPWM4 02EC         __end_of_initTMR4 038A         __end_of_initTMR6 039B  
              ??_getData 0071            _initFrequency 039B                ??_initADC 0020  
       __end_of_setServo 016E                ??_initInt 0020            _initRegisters 0331  
__end_of__initialization 0078            _initVariables 0356           __pcstackCOMMON 0070  
         ?_initFrequency 0070           ?_initRegisters 0070               __pbssBANK0 002D  
         ?_initVariables 0070   __size_ofi1_setDutyPWM1 0027   __size_ofi1_setDutyPWM2 0027  
 __size_ofi1_setDutyPWM3 0027   __size_ofi1_setDutyPWM4 0027               __pmaintext 007C  
             _getPicAddr 0377               __pintentry 0004                  _CCP1CON 0293  
                _CCP2CON 029A                  _CCP3CON 0313                  _CCP4CON 031A  
                _CCP2SEL 08EB                  _CCPTMRS 029E                ?_getSAddr 0070  
   __size_of_setDutyPWM1 002C     __size_of_setDutyPWM2 002C     __size_of_setDutyPWM3 002C  
   __size_of_setDutyPWM4 002C                  _OSCTUNE 0098                  _RXDTSEL 08EF  
                _TXCKSEL 08F0                ?_initUART 0070                ?_initPWM1 0070  
              ?_initPWM2 0070                ?_initPWM3 0070                ?_initPWM4 0070  
              ?_initTMR4 0070                ?_initTMR6 0070              setServo@val 0075  
              ?_setServo 0075          ??_initFrequency 0020          __CFG_STVREN$OFF 0000  
                _getData 031C                  __ptext1 016E                  __ptext2 0362  
                __ptext3 0356                  __ptext4 0344                  __ptext5 0393  
                __ptext6 0381                  __ptext7 0331                  __ptext8 02D4  
                __ptext9 02EC                  _initADC 038A             __size_of_ISR 0070  
                _initInt 03A2            i1_setDutyPWM1 0293            i1_setDutyPWM2 026C  
          i1_setDutyPWM3 0245            i1_setDutyPWM4 021E          ??_initRegisters 0020  
             ??_getSAddr 0071               getSAddr@d0 0072               getSAddr@d1 0070  
                main@buf 0028     end_of_initialization 0078          ??_initVariables 0020  
             getData@ret 0074               ??_initUART 0020               ??_initPWM1 0024  
             ??_initPWM2 0024               ??_initPWM3 0024               ??_initPWM4 0024  
             ??_initTMR4 0020               ??_initTMR6 0020               ??_setServo 0076  
            ?_getPicAddr 0070           ?i1_setDutyPWM1 0070           ?i1_setDutyPWM2 0070  
         ?i1_setDutyPWM3 0070           ?i1_setDutyPWM4 0070         __CFG_FOSC$INTOSC 0000  
    start_initialization 0076              __end_of_ISR 0074      __size_of_getPicAddr 000A  
        setDutyPWM1@duty 0020          setDutyPWM2@duty 0020          setDutyPWM3@duty 0020  
        setDutyPWM4@duty 0020          ??i1_setDutyPWM1 0072          ??i1_setDutyPWM2 0072  
        ??i1_setDutyPWM3 0072          ??i1_setDutyPWM4 0072                ___latbits 0001  
          __pcstackBANK0 0020        __size_of_getSAddr 000A        __size_of_initUART 0012  
      __size_of_initPWM1 0018        __size_of_initPWM2 001A        __size_of_initPWM3 0018  
      __size_of_initPWM4 0018        __size_of_initTMR4 0009        __size_of_initTMR6 0008  
              __pnvBANK0 0029        __size_of_setServo 0039                 ?_getData 0070  
          ??_setDutyPWM1 0022            ??_setDutyPWM2 0022            ??_setDutyPWM3 0022  
          ??_setDutyPWM4 0022                 ?_initADC 0070                 ?_initInt 0070  
             setServo@id 0078                _cycle_adc 002D                getData@d0 0073  
              getData@d1 0070                 _GO_nDONE 04E9             ??_getPicAddr 0071  
  __end_of_initFrequency 03A2    __end_of_initRegisters 0344      __end_of_setDutyPWM1 021E  
    __end_of_setDutyPWM2 01F2      __end_of_setDutyPWM3 01C6      __end_of_setDutyPWM4 019A  
     __end_of_getPicAddr 0381    __end_of_initVariables 0362         __size_of_getData 0015  
       __size_of_initADC 0009         __size_of_initInt 0006                 _getSAddr 036D  
               __ptext10 019A                 __ptext11 02BA                 __ptext20 021E  
               __ptext12 01C6                 __ptext21 0245                 __ptext13 0304  
               __ptext22 026C                 __ptext14 01F2                 __ptext23 0293  
               __ptext15 03A2                 __ptext24 036D                 __ptext16 039B  
               __ptext25 0377                 __ptext17 038A                 __ptext26 031C  
               __ptext19 0135                 _initUART 0344                 _initPWM1 0304  
               _initPWM2 02BA                 _initPWM3 02EC                 _initPWM4 02D4  
               _initTMR4 0381                 _initTMR6 0393            __size_of_main 00B9  
          __size_of_putc 000B             getPicAddr@d0 0072             getPicAddr@d1 0070  
               _setServo 0135                 int$flags 007E              _setDutyPWM1 01F2  
            _setDutyPWM2 01C6              _setDutyPWM3 019A              _setDutyPWM4 016E  
               intlevel1 0000        __CFG_CLKOUTEN$OFF 0000    __end_ofi1_setDutyPWM1 02BA  
  __end_ofi1_setDutyPWM2 0293    __end_ofi1_setDutyPWM3 026C    __end_ofi1_setDutyPWM4 0245  
